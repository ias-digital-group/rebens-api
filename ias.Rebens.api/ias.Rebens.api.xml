<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ias.Rebens.api</name>
    </assembly>
    <members>
        <member name="M:ias.Rebens.api.Controllers.AccountController.Login(ias.Rebens.api.Models.LoginModel,ias.Rebens.api.helper.SigningConfigurations,ias.Rebens.api.helper.TokenOptions)">
            <summary>
            Autentica um usuário na api
            </summary>
            <param name="model"></param>
            <param name="signingConfigurations"></param>
            <param name="tokenConfigurations"></param>
            <returns>O token e o usuário</returns>
            <respons code="201"></respons>
            <respons code="404"></respons>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AccountController.CheckToken(ias.Rebens.api.Models.TokenModel,ias.Rebens.api.helper.SigningConfigurations,ias.Rebens.api.helper.TokenOptions)">
            <summary>
            Valida se um token ainda é válido
            </summary>
            <param name="model"></param>
            <param name="signingConfigurations"></param>
            <param name="tokenConfigurations"></param>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AccountController.ChangePassword(ias.Rebens.api.Models.ChangePasswordModel)">
            <summary>
            Altera a senha do usuário
            </summary>
            <param name="model">{ Id: id do usuário, OldPassword: senha antiga, NewPassword: nova senha, NewPasswordConfirm: confirmação da nova senha }</param>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AddressController.ListAddress(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Retorna uma lista de endereços conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Street, City, State), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="201">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AddressController.GetCategory(System.Int32)">
            <summary>
            Retorna o endereço conforme o ID
            </summary>
            <param name="id">Id do endereço desejada</param>
            <returns>Endereço</returns>
            <response code="201">Retorna a categoria, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AddressController.Put(ias.Rebens.api.Models.AddressModel)">
            <summary>
            Atualiza um endereço
            </summary>
            <param name="address"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AddressController.Post(ias.Rebens.api.Models.AddressModel)">
            <summary>
            Cria um endereço
            </summary>
            <param name="address"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, e o Id da categoria criada</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AddressController.Delete(System.Int32)">
            <summary>
            Apaga um endereço
            </summary>
            <param name="id">Id do endereço a ser apagado</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.#ctor(ias.Rebens.IBenefitRepository,ias.Rebens.IAddressRepository,ias.Rebens.ICategoryRepository)">
            <summary>
            Construtor
            </summary>
            <param name="benefitRepository">Injeção de dependencia do repositório de Benefício</param>
            <param name="addressRepository">Injeção de dependencia do repositório de Endereço</param>
            <param name="categoryRepository">Injeção de dependencia do repositório de Categoria</param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.ListBenefit(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos os benefícios com paginação
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Title), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os benefícios encontrados</returns>
            <response code="201">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.GetBenefit(System.Int32)">
            <summary>
            Retorna o benefício conforme o ID
            </summary>
            <param name="id">Id do benefício</param>
            <returns>Parceiros</returns>
            <response code="201">Retorna o benefício, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.Put(ias.Rebens.api.Models.BenefitModel)">
            <summary>
            Atualiza um benefício
            </summary>
            <param name="benefit"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.Post(ias.Rebens.api.Models.BenefitModel)">
            <summary>
            Cria um benefício
            </summary>
            <param name="benefit"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id do benefício criado</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.ListAddress(System.Int32)">
            <summary>
            Lista os endereço de um benefício
            </summary>
            <param name="id">id do benefício</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="201">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.AddAddress(ias.Rebens.api.Models.BenefitAddressModel)">
            <summary>
            Adiciona um endereço a um benefício
            </summary>
            <param name="model">{ IdBenefit: 0, idAddress: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.RemoveAddress(ias.Rebens.api.Models.BenefitAddressModel)">
            <summary>
            Remove um endereço de um parceiro
            </summary>
            <param name="model">{ IdBenefit: 0, idAddress: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.ListCategories(System.Int32)">
            <summary>
            Lista as categorias de um benefício
            </summary>
            <param name="id">id do benefício</param>
            <returns>Lista com as categorias encontradas</returns>
            <response code="201">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.AddCategory(ias.Rebens.api.Models.BenefitCategoryModel)">
            <summary>
            Adiciona uma categoria a um benefício
            </summary>
            <param name="model">{ IdBenefit: 0, IdCategory: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.RemoveCategory(ias.Rebens.api.Models.BenefitCategoryModel)">
            <summary>
            Remove uma categoria de um benefício
            </summary>
            <param name="model">{ IdBenefit: 0, IdCategory: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.ListCategory(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Retorna uma lista de categorias conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com as categorias encontradas</returns>
            <response code="201">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.GetCategory(System.Int32)">
            <summary>
            Retorna a categoria conforme o ID
            </summary>
            <param name="id">Id da categoria desejada</param>
            <returns>Categoria</returns>
            <response code="201">Retorna a categoria, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.Put(ias.Rebens.api.Models.CategoryModel)">
            <summary>
            Atualiza uma categoria
            </summary>
            <param name="category"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.Post(ias.Rebens.api.Models.CategoryModel)">
            <summary>
            Cria uma categoria
            </summary>
            <param name="category"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da categoria criada</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.Delete(System.Int32)">
            <summary>
            Apaga uma categoria
            </summary>
            <param name="id">Id da categoria a ser apagada</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.ListTree">
            <summary>
            Retorna a arvore de categorias 
            </summary>
            <returns>Lista com as categorias encontradas</returns>
            <response code="201">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ContactController.ListAddress(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Retorna uma lista de contatos conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Email, JobTitle), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os contatos encontradas</returns>
            <response code="201">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ContactController.GetContact(System.Int32)">
            <summary>
            Retorna o contato conforme o ID
            </summary>
            <param name="id">Id do contato desejado</param>
            <returns>Contato</returns>
            <response code="201">Retorna o contato, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ContactController.Post(ias.Rebens.api.Models.ContactModel)">
            <summary>
            Atualiza um contato
            </summary>
            <param name="contact"></param>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ContactController.Put(ias.Rebens.api.Models.ContactModel)">
            <summary>
            Cria um novo contato
            </summary>
            <param name="contact"></param>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ContactController.Delete(System.Int32)">
            <summary>
            Apaga um contato
            </summary>
            <param name="id">Id do contato a ser apagado</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.ListFaq(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista as perguntas de faq conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Question, Answer, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com as faqs encontradas</returns>
            <response code="201">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.GetFaq(System.Int32)">
            <summary>
            Retorna uma pergunta
            </summary>
            <param name="id">Id da pergunta desejada</param>
            <returns>FAQ</returns>
            <response code="201">Retorna a faq, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.Put(ias.Rebens.api.Models.FaqModel)">
            <summary>
            Atualiza uma pergunta
            </summary>
            <param name="faq">FAQ</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.Post(ias.Rebens.api.Models.FaqModel)">
            <summary>
            Cria uma pergunta
            </summary>
            <param name="faq"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da faq criada</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.Delete(System.Int32)">
            <summary>
            Apaga uma pergunta
            </summary>
            <param name="id">Id da pergunta a ser apagada</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.ListByOperation(System.Int32)">
            <summary>
            Lista as perguntas de uma operação 
            </summary>
            <param name="idOperation">id da operação</param>
            <returns>lista das Perguntas da operação</returns>
            <response code="201">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.ListBenefitType">
            <summary>
            Lista os tipos de benefício
            </summary>
            <returns></returns>
            <response code="201">Retorna a lista, ou algum erro, caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.ListIntegrationType">
            <summary>
            Lista os tipos de integração
            </summary>
            <returns></returns>
            <response code="201">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.ListOperationType">
            <summary>
            Lista os tipos de operação
            </summary>
            <returns></returns>
            <response code="201">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.ListStaticTextType">
            <summary>
            Lista os tipos de textos estáticos
            </summary>
            <returns></returns>
            <response code="201">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.LogErrorController.Get(System.String,System.Int32,System.Int32)">
            <summary>
            Lista os logs com paginação
            </summary>
            <param name="token"></param>
            <param name="page"></param>
            <param name="pageItems"></param>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.LogErrorController.Clear(System.String)">
            <summary>
            Limpa todos os logs
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.LogErrorController.Delete(System.String,System.DateTime)">
            <summary>
            Apaga todos os logs mais antigos que a data enviada
            </summary>
            <param name="token"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.#ctor(ias.Rebens.IOperationRepository,ias.Rebens.IContactRepository,ias.Rebens.IAddressRepository)">
            <summary>
            Construtor
            </summary>
            <param name="operationRepository">Injeção de dependencia do repositório de operação</param>
            <param name="contactRepository">Injeção de dependencia do repositório de contato</param>
            <param name="addressRepository">Injeção de dependencia do repositório de endereço</param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.ListOperation(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todas as operações com paginação
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Domain, Title, CompanyName, CompanyDoc), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com as operações encontradas</returns>
            <response code="201">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.GetOperation(System.Int32)">
            <summary>
            Retorna a operação conforme o ID
            </summary>
            <param name="id">Id da operação desejada</param>
            <returns>Operação</returns>
            <response code="201">Retorna a operação, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.Put(ias.Rebens.api.Models.OperationModel)">
            <summary>
            Atualiza uma operação
            </summary>
            <param name="operation"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.Post(ias.Rebens.api.Models.OperationModel)">
            <summary>
            Cria uma operação
            </summary>
            <param name="operation"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da operação criada</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.ListContacts(System.Int32)">
            <summary>
            Lista os contatos de uma operação
            </summary>
            <param name="id">id da operação</param>
            <returns>Lista com os contatos encontradas</returns>
            <response code="201">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.ListAddress(System.Int32)">
            <summary>
            Lista os endereço de uma Operação
            </summary>
            <param name="id">id da operação</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="201">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.AddContact(ias.Rebens.api.Models.OperationContactModel)">
            <summary>
            Adiciona um contato a uma operação
            </summary>
            <param name="model">{ idOperation: 0, idContact: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.RemoveContact(ias.Rebens.api.Models.OperationContactModel)">
            <summary>
            Remove um contato de uma operação
            </summary>
            <param name="model">{ idOperation: 0, idContact: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.AddAddress(ias.Rebens.api.Models.OperationAddressModel)">
            <summary>
            Adiciona um endereço a uma operação
            </summary>
            <param name="model">{ idOperation: 0, idAddress: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.RemoveAddress(ias.Rebens.api.Models.OperationAddressModel)">
            <summary>
            Remove um endereço de uma operação
            </summary>
            <param name="model">{ idOperation: 0, idAddress: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.#ctor(ias.Rebens.IPartnerRepository,ias.Rebens.IContactRepository,ias.Rebens.IAddressRepository,ias.Rebens.IBenefitRepository)">
            <summary>
            Construtor
            </summary>
            <param name="partnerRepository">Injeção de dependencia do repositório de parceiros</param>
            <param name="contactRepository">Injeção de dependencia do repositório de contato</param>
            <param name="addressRepository">Injeção de dependencia do repositório de endereço</param>
            <param name="benefitRepository">Injeção de dependencia do repositório de benefício</param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.ListPartners(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos os parceiros com paginação
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os parceiros encontrados</returns>
            <response code="201">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.GetPartner(System.Int32)">
            <summary>
            Retorna o parceiro conforme o ID
            </summary>
            <param name="id">Id do parceiro</param>
            <returns>Parceiros</returns>
            <response code="201">Retorna o parceiro, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.Put(ias.Rebens.api.Models.PartnerModel)">
            <summary>
            Atualiza um parceiro
            </summary>
            <param name="partner"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.Post(ias.Rebens.api.Models.PartnerModel)">
            <summary>
            Cria um parceiro
            </summary>
            <param name="partner"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id do parceiro criado</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.ListContacts(System.Int32)">
            <summary>
            Lista os contatos de um parceiro
            </summary>
            <param name="id">id do parceiro</param>
            <returns>Lista com os contatos encontradas</returns>
            <response code="201">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.ListAddress(System.Int32)">
            <summary>
            Lista os endereço de um parceiro
            </summary>
            <param name="id">id do parceiro</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="201">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.AddContact(ias.Rebens.api.Models.PartnerContactModel)">
            <summary>
            Adiciona um contato a um parceiro
            </summary>
            <param name="model">{ idPartner: 0, idContact: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.RemoveContact(ias.Rebens.api.Models.PartnerContactModel)">
            <summary>
            Remove um contato de um parceiro
            </summary>
            <param name="model">{ idPartner: 0, idContact: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.AddAddress(ias.Rebens.api.Models.PartnerAddressModel)">
            <summary>
            Adiciona um endereço a um parceiro
            </summary>
            <param name="model">{ idPartner: 0, idAddress: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.RemoveAddress(ias.Rebens.api.Models.PartnerAddressModel)">
            <summary>
            Remove um endereço de um parceiro
            </summary>
            <param name="model">{ idPartner: 0, idAddress: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="201"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.ListBenefits(System.Int32)">
            <summary>
            Lista os endereço de um parceiro
            </summary>
            <param name="id">id do parceiro</param>
            <returns>Lista com os benefícios encontradas</returns>
            <response code="201">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
        </member>
        <member name="T:ias.Rebens.api.Models.AddressModel">
            <summary>
            Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Id">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Name">
            <summary>
            Nome do endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Street">
            <summary>
            Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Number">
            <summary>
            Número
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Complement">
            <summary>
            Complemento (sala, apto, etc)
            </summary> 
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Neighborhood">
            <summary>
            Bairro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.City">
            <summary>
            Cidade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.State">
            <summary>
            Estado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Country">
            <summary>
            País
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Zipcode">
            <summary>
            CEP
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Latitude">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Longitude">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.AddressModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.AddressModel.#ctor(ias.Rebens.Address)">
            <summary>
            Construtor que recebe um objeto Address e já popula os atributos
            </summary>
            <param name="addr"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.AddressModel.GetEntity">
            <summary>
            Retorna um objeto Address com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitAddressModel">
            <summary>
            Relacionamento Benefício com Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitAddressModel.IdBenefit">
            <summary>
            Id do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitAddressModel.IdAddress">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitCategoryModel">
            <summary>
            Relacionamento Beneficio com Categoria
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitCategoryModel.IdBenefit">
            <summary>
            Id do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitCategoryModel.IdCategory">
            <summary>
            Id da categoria
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitModel">
            <summary>
            Benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Title">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Image">
            <summary>
            Imagem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.DueDate">
            <summary>
            Data de validade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.WebSite">
            <summary>
            Site do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.MaxDiscountPercentageOnline">
            <summary>
            Porcentagem máxima de desconto online
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.CpvpercentageOnline">
            <summary>
            Porcentagem de CPV online
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.MaxDiscountPercentageOffline">
            <summary>
            Porcentagem máxima de desconto offline
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.CpvpercentageOffline">
            <summary>
            Porcentagem de CPV offline
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Start">
            <summary>
            Início
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.End">
            <summary>
            Fim
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.IdBenefitType">
            <summary>
            Tipo de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Exclusive">
            <summary>
            É um benefício exclusivo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.IdIntegrationType">
            <summary>
            Tipo de Integração
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.IdPartner">
            <summary>
            Id do parceiro
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitModel.#ctor(ias.Rebens.Benefit)">
            <summary>
            Construtor que recebe um Benefício e já popula os atributos
            </summary>
            <param name="benefit"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitOperationModel">
            <summary>
            Relacionamento Benefício com Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitOperationModel.IdBenefit">
            <summary>
            Id do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitOperationModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitTypeModel">
            <summary>
            Tipo de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitTypeModel.Id">
            <summary>
            Id do tipo de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitTypeModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitTypeModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitTypeModel.#ctor(ias.Rebens.BenefitType)">
            <summary>
            Construtor que recebe um BenefitType e popula os atributos
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.CategoryModel">
            <summary>
            Categoria
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Id">
            <summary>
            Id da categoria
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Order">
            <summary>
            Ordem que ela deve aparecer
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.IdParent">
            <summary>
            Id do pai, caso seja uma subcategoria, caso contrário null
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Icon">
            <summary>
            Ícone, nome da imagem representando o ícone
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Active">
            <summary>
            Se está ativa ou inativa
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Categories">
            <summary>
            Lista de categorias filhas, caso seja uma categoria pai
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CategoryModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CategoryModel.#ctor(ias.Rebens.Category)">
            <summary>
            Construtor que recebe um objeto Category e já popula os atributos
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.CategoryModel.GetEntity">
            <summary>
            Retorna um objeto Categoria com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.ChangePasswordModel">
            <summary>
            Alteração de senha
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ChangePasswordModel.Id">
            <summary>
            Id do Usuário
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ChangePasswordModel.OldPassword">
            <summary>
            Senha antiga
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ChangePasswordModel.NewPassword">
            <summary>
            Nova senha
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ChangePasswordModel.NewPasswordConfirm">
            <summary>
            Confirmação da nova senha
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.ContactModel">
            <summary>
            Contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.Id">
            <summary>
            Id do contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.Name">
            <summary>
            Nome do contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.JobTitle">
            <summary>
            Profissão
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.Phone">
            <summary>
            Telefone
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.CellPhone">
            <summary>
            Celular
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.IdAddress">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.Address">
            <summary>
            Endereço
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.ContactModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.ContactModel.#ctor(ias.Rebens.Contact)">
            <summary>
            Construtor que recebe um objeto Contact e popula os atributos
            </summary>
            <param name="contact"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.ContactModel.GetEntity">
            <summary>
            Retorna um objeto Contact com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.FaqModel">
            <summary>
            FAQ
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.Id">
            <summary>
            Id da pergunta
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.Question">
            <summary>
            Pergunta
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.Answer">
            <summary>
            Resposta
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.Order">
            <summary>
            Ordem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.FaqModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.FaqModel.#ctor(ias.Rebens.Faq)">
            <summary>
            Construtor que recebe um objeto Faq e popula os atributos
            </summary>
            <param name="faq"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.FaqModel.GetEntity">
            <summary>
            Retorna um objeto Faq com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.IntegrationTypeModel">
            <summary>
            Tipo de integração
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.IntegrationTypeModel.Id">
            <summary>
            Id 
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.IntegrationTypeModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.IntegrationTypeModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.IntegrationTypeModel.#ctor(ias.Rebens.IntegrationType)">
            <summary>
            Construtor que recebe um objeto IntegrationType, e popula os atributos
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.JsonModel">
            <summary>
            Modelo de resposta Json
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.JsonModel.Status">
            <summary>
            Status da requisição
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.JsonModel.Message">
            <summary>
            Mensagem de erro, alerta ou sucesso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.JsonModel.Data">
            <summary>
            Informações requisitadas
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.LoginModel">
            <summary>
            Login
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.LoginModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.LoginModel.Password">
            <summary>
            Senha
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.OperationAddressModel">
            <summary>
            Relacionamento de Operação com Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationAddressModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationAddressModel.IdAddress">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.OperationContactModel">
            <summary>
            Relacionamento de Operação com Contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationContactModel.IdOperation">
            <summary>
            Id da Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationContactModel.IdContact">
            <summary>
            Id do Contato
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.OperationModel">
            <summary>
            Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Title">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.CompanyName">
            <summary>
            Nome da empresa
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.CompanyDoc">
            <summary>
            Documento da empresa
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Image">
            <summary>
            Logo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Domain">
            <summary>
            Domínio da opreação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.IdOperationType">
            <summary>
            Tipo da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.CachbackPercentage">
            <summary>
            Porcentagem do cashback
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Contact">
            <summary>
            Contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.OperationContacts">
            <summary>
            Lista de relacionamento de Operações com Contato
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationModel.#ctor(ias.Rebens.Operation)">
            <summary>
            Construtor que recebe um objeto Operation e popula os atributos
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationModel.GetEntity">
            <summary>
            Retorna um objeto Operation com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.OperationTypeModel">
            <summary>
            Tipo de Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationTypeModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationTypeModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationTypeModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationTypeModel.#ctor(ias.Rebens.OperationType)">
            <summary>
            Construtor que recebe um objeto OperationType e popula os atributos
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.PartnerAddressModel">
            <summary>
            Relacionamento Parceiro com Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerAddressModel.IdPartner">
            <summary>
            Id do parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerAddressModel.IdAddress">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.PartnerContactModel">
            <summary>
            Relacionamento Parceiro com Contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerContactModel.IdPartner">
            <summary>
            Id do parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerContactModel.IdContact">
            <summary>
            Id do Contato
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.PartnerModel">
            <summary>
            Parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.Contact">
            <summary>
            Contato
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.PartnerModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.PartnerModel.#ctor(ias.Rebens.Partner)">
            <summary>
            Construtor que recebe um objeto Partner e popula os atributos
            </summary>
            <param name="partner"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.PartnerModel.GetEntity">
            <summary>
            retorna um objeto Partner com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.ResultPageModel`1">
            <summary>
            Modelo de Resultado com paginação
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.Data">
            <summary>
            Lista com os itens
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.CurrentPage">
            <summary>
            Página atual
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.ItemsPerPage">
            <summary>
            Itens por página
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.TotalItems">
            <summary>
            Total de itens
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.TotalPages">
            <summary>
            Total de páginas
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.HasNextPage">
            <summary>
            Possui próxima página
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.HasPreviousPage">
            <summary>
            Possui página anterior
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.StaticTextModel">
            <summary>
            Texto estático
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Title">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Html">
            <summary>
            Html
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Style">
            <summary>
            Estilo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Order">
            <summary>
            Ordem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.IdStaticTextType">
            <summary>
            Id do Tipo de texto estático
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.StaticTextType">
            <summary>
            Tipo de texto estático
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.StaticTextModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.StaticTextModel.#ctor(ias.Rebens.StaticText)">
            <summary>
            Construtor que recebe um objeto StaticText e popula os atributos
            </summary>
            <param name="staticText"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.StaticTextModel.GetEntity">
            <summary>
            Retorna um objeto StaticText com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.StaticTextTypeModel">
            <summary>
            Tipo de Texto Estático
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextTypeModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextTypeModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.StaticTextTypeModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.StaticTextTypeModel.#ctor(ias.Rebens.StaticTextType)">
            <summary>
            Construtor que recebe um objeto StaticTextType e popula os atributos
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.TokenModel">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.TokenModel.authenticated">
            <summary>
            Se está autenticado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.TokenModel.created">
            <summary>
            Data da criação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.TokenModel.expiration">
            <summary>
            Data que o token irá expirar
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.TokenModel.accessToken">
            <summary>
            Access Token
            </summary>
        </member>
    </members>
</doc>
