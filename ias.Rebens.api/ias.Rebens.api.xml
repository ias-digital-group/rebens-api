<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ias.Rebens.api</name>
    </assembly>
    <members>
        <member name="T:ias.Rebens.api.Controllers.AccountController">
            <summary>
            Account Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AccountController.#ctor(ias.Rebens.IAdminUserRepository)">
            <summary>
            Constructor
            </summary>
            <param name="adminUserRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AccountController.Login(ias.Rebens.api.Models.LoginModel,ias.Rebens.api.helper.SigningConfigurations,ias.Rebens.api.helper.TokenOptions)">
            <summary>
            Autentica um usuário na api
            </summary>
            <param name="model"></param>
            <param name="signingConfigurations"></param>
            <param name="tokenConfigurations"></param>
            <returns>O token e o usuário</returns>
            <respons code="200">se o usuário logar</respons>
            <respons code="404">se não encontrar o usuário ou a senha não estiver correta</respons>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AccountController.CheckToken(ias.Rebens.api.Models.TokenModel,ias.Rebens.api.helper.SigningConfigurations,ias.Rebens.api.helper.TokenOptions)">
            <summary>
            Valida se um token ainda é válido
            </summary>
            <param name="model"></param>
            <param name="signingConfigurations"></param>
            <param name="tokenConfigurations"></param>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AccountController.ChangePassword(ias.Rebens.api.Models.ChangePasswordModel)">
            <summary>
            Altera a senha do usuário
            </summary>
            <param name="model">{ Id: id do usuário, OldPassword: senha antiga, NewPassword: nova senha, NewPasswordConfirm: confirmação da nova senha }</param>
            <returns></returns>
            <respons code="200"></respons>
            <respons code="400"></respons>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AccountController.RememberPassword(System.String)">
            <summary>
            Lembrete de senha
            </summary>
            <param name="email">Email</param>
            <returns></returns>
            <respons code="200"></respons>
            <respons code="400"></respons>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AccountController.Validate(ias.Rebens.api.Models.ValidateModel,ias.Rebens.api.helper.SigningConfigurations,ias.Rebens.api.helper.TokenOptions)">
            <summary>
            Validação de cadastro
            </summary>
            <param name="model"></param>
            <param name="signingConfigurations"></param>
            <param name="tokenConfigurations"></param>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Controllers.AddressController">
            <summary>
            Address Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AddressController.#ctor(ias.Rebens.IAddressRepository)">
            <summary>
            Constructor
            </summary>
            <param name="addressRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AddressController.List(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Retorna uma lista de endereços conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Street, City, State), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AddressController.Get(System.Int32)">
            <summary>
            Retorna o endereço conforme o ID
            </summary>
            <param name="id">Id do endereço desejada</param>
            <returns>Endereço</returns>
            <response code="200">Retorna a categoria, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AddressController.Put(ias.Rebens.api.Models.AddressModel)">
            <summary>
            Atualiza um endereço
            </summary>
            <param name="address"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AddressController.Post(ias.Rebens.api.Models.AddressModel)">
            <summary>
            Cria um endereço
            </summary>
            <param name="address"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, e o Id da categoria criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AddressController.Delete(System.Int32)">
            <summary>
            Apaga um endereço
            </summary>
            <param name="id">Id do endereço a ser apagado</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.AdminUserController">
            <summary>
            AdminUser Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AdminUserController.#ctor(ias.Rebens.IAdminUserRepository)">
            <summary>
            Consturctor
            </summary>
            <param name="adminUserRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AdminUserController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String)">
            <summary>
            Retorna uma lista de usuários conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="idOperation">id da operação, não obrigatório (default=null)</param>
            <param name="active">active, não obrigatório (default=null)</param>
            <param name="role">papel, não obrigatório (default=null)</param>
            <returns>Lista com os usuários encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AdminUserController.Get(System.Int32)">
            <summary>
            Retorna Usuário conforme o ID
            </summary>
            <param name="id">Id do usuário desejada</param>
            <returns>Categoria</returns>
            <response code="200">Retorna o usuário, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AdminUserController.Put(ias.Rebens.api.Models.AdminUserModel)">
            <summary>
            Atualiza um usuário
            </summary>
            <param name="user"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AdminUserController.Post(ias.Rebens.api.Models.AdminUserModel)">
            <summary>
            Cria um usuário
            </summary>
            <param name="user"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id do usuário criado</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AdminUserController.Delete(System.Int32)">
            <summary>
            Apaga um usuário
            </summary>
            <param name="id">Id do usuário a ser apagada</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.AdminUserController.ResendValidation(System.Int32)">
            <summary>
            Reenvia o email de validação do cliente
            </summary>
            <param name="id">id do usuário</param>
            <returns></returns>
            <response code="200">Se o e-mail for enviado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.BankAccountController">
            <summary>
            Bank Account Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BankAccountController.#ctor(ias.Rebens.IBankAccountRepository)">
            <summary>
            Constructor
            </summary>
            <param name="bankAccountRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BankAccountController.List(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos as contas de um cliente com paginação
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Branch, Account, Type), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com as contas encontrados</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BankAccountController.Get(System.Int32)">
            <summary>
            Retorna a conta conforme o ID
            </summary>
            <param name="id">Id da conta</param>
            <returns>Conta</returns>
            <response code="200">Retorna a conta, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BankAccountController.Put(ias.Rebens.api.Models.BankAccountModel)">
            <summary>
            Atualiza uma conta
            </summary>
            <param name="account"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BankAccountController.Post(ias.Rebens.api.Models.BankAccountModel)">
            <summary>
            Cria uma conta
            </summary>
            <param name="account"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da conta criado</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BankAccountController.Delete(System.Int32)">
            <summary>
            Apaga uma conta
            </summary>
            <param name="id">Id da conta a ser apagado</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BankAccountController.ListBanks">
            <summary>
            Lista os Bancos
            </summary>
            <returns></returns>
            <response code="200">Retorna a lista, ou algum erro, caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.BannerController">
            <summary>
            Banner Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BannerController.#ctor(ias.Rebens.IBannerRepository,ias.Rebens.IOperationRepository)">
            <summary>
            Constructor
            </summary>
            <param name="bannerRepository"></param>
            <param name="operationRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BannerController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Lista os banners conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="active">Active, não obrigatório (default=null)</param>
            <param name="type">Tipo de banner, não obrigatório (default=null)</param>
            <param name="idOperation">id da Operação, não obrigatório (default=null)</param>
            <returns>Lista com os banners encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BannerController.Get(System.Int32)">
            <summary>
            Retorna um banner
            </summary>
            <param name="id">Id do banner desejada</param>
            <returns>Banner</returns>
            <response code="200">Retorna o banner, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BannerController.Put(ias.Rebens.api.Models.BannerModel)">
            <summary>
            Atualiza um banner
            </summary>
            <param name="banner">Banner</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BannerController.Post(ias.Rebens.api.Models.BannerModel)">
            <summary>
            Cria um Banner
            </summary>
            <param name="banner">Banner</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da faq criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BannerController.Delete(System.Int32)">
            <summary>
            Apaga um banner
            </summary>
            <param name="id">Id do banner a ser apagado</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BannerController.AddOperation(ias.Rebens.api.Models.BannerOperationModel)">
            <summary>
            Adiciona um banner a uma operação
            </summary>
            <param name="model">{ IdBanner: 0, IdOperation: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula um banner com uma Operação</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BannerController.RemoveOperation(System.Int32,System.Int32)">
            <summary>
            Remove um banner de uma operação
            </summary>
            <param name="id">id do banner</param>
            <param name="idOperation">id da operação</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o vínculo de banner com uma operação</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BannerController.ListOperations(System.Int32)">
            <summary>
            Lista todas operações, e marca quais estão vinculadas ao banner
            </summary>
            <param name="id">id do banner</param>
            <returns>Lista com todas operações</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.BenefitController">
            <summary>
            Benefit Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.#ctor(ias.Rebens.IBenefitRepository,ias.Rebens.IAddressRepository,ias.Rebens.ICategoryRepository,ias.Rebens.IOperationRepository,ias.Rebens.IStaticTextRepository)">
            <summary>
            Construtor
            </summary>
            <param name="benefitRepository">Injeção de dependencia do repositório de Benefício</param>
            <param name="addressRepository">Injeção de dependencia do repositório de Endereço</param>
            <param name="categoryRepository">Injeção de dependencia do repositório de Categoria</param>
            <param name="operationRepository">Injeção de dependencia do repositório de Operação</param>
            <param name="staticTextRepository">Injeção de dependencia do repositório de Texto Estático</param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Lista todos os benefícios com paginação
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Title), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="idOperation">id da operação, não obrigatório (default=null)</param>
            <param name="active">status, não obrigatório (default=null)</param>
            <param name="type">tipo do benefício, não obrigatório (default=null)</param>
            <returns>Lista com os benefícios encontrados</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.Get(System.Int32)">
            <summary>
            Retorna o benefício conforme o ID
            </summary>
            <param name="id">Id do benefício</param>
            <returns>Parceiros</returns>
            <response code="200">Retorna o benefício, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.Put(ias.Rebens.api.Models.BenefitModel)">
            <summary>
            Atualiza um benefício
            </summary>
            <param name="benefit"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.Post(ias.Rebens.api.Models.BenefitModel)">
            <summary>
            Cria um benefício
            </summary>
            <param name="benefit"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id do benefício criado</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.Delete(System.Int32)">
            <summary>
            Remove um Benefício
            </summary>
            <param name="id">id do benefídio</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o benefício</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.ListAddress(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os endereço de um benefício
            </summary>
            <param name="id">id do benefício</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Street, City, State), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.AddAddress(ias.Rebens.api.Models.BenefitAddressModel)">
            <summary>
            Adiciona um endereço a um benefício
            </summary>
            <param name="model">{ IdBenefit: 0, idAddress: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula um benefício com um endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.RemoveAddress(System.Int32,System.Int32)">
            <summary>
            Remove um endereço de um parceiro
            </summary>
            <param name="id">id do benefídio</param>
            <param name="idAddress">id do endereço</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o vínculo de benefício com endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.ListCategories(System.Int32)">
            <summary>
            Lista os ids das categorias vínculadas ao benefício
            </summary>
            <param name="id">id do benefício</param>
            <returns>Lista com os Ids das categorias</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.AddCategory(ias.Rebens.api.Models.BenefitCategoryModel)">
            <summary>
            Adiciona uma categoria a um benefício
            </summary>
            <param name="model">{ IdBenefit: 0, IdCategory: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula um benefício com uma categoria</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.SaveCategories(ias.Rebens.api.Models.BenefitCategoriesModel)">
            <summary>
            Adiciona uma categoria a um benefício
            </summary>
            <param name="model">{ IdBenefit: 0, IdCategory: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula um benefício com uma categoria</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.RemoveCategory(System.Int32,System.Int32)">
            <summary>
            Remove uma categoria de um benefício
            </summary>
            <param name="id">id do benefício</param>
            <param name="idCategory">id da categoria</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o vínculo de benefício com uma categoria</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.ListOperations(System.Int32)">
            <summary>
            Lista todas operações, e marca quais estão vinculadas ao benefício
            </summary>
            <param name="id">id do benefício</param>
            <returns>Lista com todas operações</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.AddOperation(ias.Rebens.api.Models.BenefitOperationModel)">
            <summary>
            Adiciona uma operação a um benefício
            </summary>
            <param name="model">{ IdBenefit: 0, id: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula um benefício com uma Operação</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.RemoveOperation(System.Int32,System.Int32)">
            <summary>
            Remove uma operação de um benefício
            </summary>
            <param name="id">id do benefício</param>
            <param name="idOperation">id da categoria</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o vínculo de benefício com uma operação</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.ListPositions">
            <summary>
            Lista as posições
            </summary>
            <returns>Lista com as posições</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.BenefitController.ListActive">
            <summary>
            Lista os benefícios ativos
            </summary>
            <returns>Lista com os benefícios</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.CategoryController">
            <summary>
            Category Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.#ctor(ias.Rebens.ICategoryRepository,ias.Rebens.ILogErrorRepository)">
            <summary>
            Constructor
            </summary>
            <param name="categoryRepository"></param>
            <param name="logErrorRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Retorna uma lista de categorias conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="active">active, não obrigatório (default=null)</param>
            <param name="idParent">id do pai, não obrigatório (default=null)</param>
            <returns>Lista com as categorias encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.Get(System.Int32)">
            <summary>
            Retorna a categoria conforme o ID
            </summary>
            <param name="id">Id da categoria desejada</param>
            <returns>Categoria</returns>
            <response code="200">Retorna a categoria, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.Put(ias.Rebens.api.Models.CategoryModel)">
            <summary>
            Atualiza uma categoria
            </summary>
            <param name="category"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.Post(ias.Rebens.api.Models.CategoryModel)">
            <summary>
            Cria uma categoria
            </summary>
            <param name="category"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da categoria criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.Delete(System.Int32)">
            <summary>
            Apaga uma categoria
            </summary>
            <param name="id">Id da categoria a ser apagada</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CategoryController.ListTree">
            <summary>
            Retorna a arvore de categorias 
            </summary>
            <returns>Lista com as categorias encontradas</returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.ContactController">
            <summary>
            Contact Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ContactController.#ctor(ias.Rebens.IContactRepository,ias.Rebens.IAddressRepository)">
            <summary>
            Constructor
            </summary>
            <param name="contactRepository"></param>
            <param name="addressRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ContactController.List(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Retorna uma lista de contatos conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Email, JobTitle), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os contatos encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ContactController.Get(System.Int32)">
            <summary>
            Retorna o contato conforme o ID
            </summary>
            <param name="id">Id do contato desejado</param>
            <returns>Contato</returns>
            <response code="200">Retorna o contato, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ContactController.Put(ias.Rebens.api.Models.ContactModel)">
            <summary>
            Atualiza um contato
            </summary>
            <param name="contact"></param>
            <returns></returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ContactController.Post(ias.Rebens.api.Models.ContactModel)">
            <summary>
            Cria um novo contato
            </summary>
            <param name="contact"></param>
            <returns></returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ContactController.Delete(System.Int32)">
            <summary>
            Apaga um contato
            </summary>
            <param name="id">Id do contato a ser apagado</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.CourseCollegeController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseCollegeController.#ctor(ias.Rebens.ICourseCollegeRepository,ias.Rebens.IAddressRepository)">
            <summary>
            Constructor
            </summary>
            <param name="courseCollegeRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseCollegeController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Lista as faculdades conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="idOperation">Id da Operação</param>
            <returns>Lista com as faculdades encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseCollegeController.Get(System.Int32)">
            <summary>
            Retorna uma faculdade
            </summary>
            <param name="id">Id da faculdade</param>
            <returns>Modalidade</returns>
            <response code="200">Retorna a faculdade, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseCollegeController.Put(ias.Rebens.api.Models.CourseCollegeModel)">
            <summary>
            Atualiza uma faculdade
            </summary>
            <param name="college">Faculdade</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseCollegeController.Post(ias.Rebens.api.Models.CourseCollegeModel)">
            <summary>
            Cria uma modalidade de curso
            </summary>
            <param name="college"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id do período criado</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseCollegeController.Delete(System.Int32)">
            <summary>
            Apaga uma faculdade
            </summary>
            <param name="id">Id da faculdade a ser apagada</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseCollegeController.ListAddress(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os endereço de uma faculdade
            </summary>
            <param name="id">id da faculdade</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Street, City, State), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseCollegeController.AddAddress(ias.Rebens.api.Models.CourseCollegeAddressModel)">
            <summary>
            Adiciona um endereço a uma faculdade
            </summary>
            <param name="model">{ idCourseCollege: 0, idAddress: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula uma faculdade com um endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseCollegeController.RemoveAddress(System.Int32,System.Int32)">
            <summary>
            Remove um endereço de uma faculdade
            </summary>
            <param name="id">id da faculdade</param>
            <param name="idAddress">id do endereço</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o vínculo de benefício com endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.CourseController">
            <summary>
            Benefit Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.#ctor(ias.Rebens.ICourseRepository,ias.Rebens.IAddressRepository,ias.Rebens.IStaticTextRepository)">
            <summary>
            Construtor
            </summary>
            <param name="courseRepository">Injeção de dependencia do repositório de Curso</param>
            <param name="addressRepository">Injeção de dependencia do repositório de Endereço</param>
            <param name="staticTextRepository">Injeção de dependencia do repositório de Texto Estático</param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Lista todos os cursos com paginação
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Title), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="idOperation">id da operação, não obrigatório (default=null)</param>
            <param name="active">active, não obrigatório (default=null)</param>
            <returns>Lista com os cursos encontrados</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.Get(System.Int32)">
            <summary>
            Retorna o curso conforme o ID
            </summary>
            <param name="id">Id do curso</param>
            <returns>Curso</returns>
            <response code="200">Retorna o curso, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.Put(ias.Rebens.api.Models.CourseModel)">
            <summary>
            Atualiza um curso
            </summary>
            <param name="course"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.Post(ias.Rebens.api.Models.CourseModel)">
            <summary>
            Cria um curso
            </summary>
            <param name="course"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id do curso criado</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.Delete(System.Int32)">
            <summary>
            Remove um curso
            </summary>
            <param name="id">id do curso</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o curso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.ListAddress(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os endereço de um curso
            </summary>
            <param name="id">id do curso</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Street, City, State), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.AddAddress(System.Int32,System.Int32)">
            <summary>
            Adiciona um endereço a um curso
            </summary>
            <param name="id">id do curso</param>
            <param name="idAddress">id do endereço</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula um curso com um endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.RemoveAddress(System.Int32,System.Int32)">
            <summary>
            Remove um endereço de um curso
            </summary>
            <param name="id">id do curso</param>
            <param name="idAddress">id do endereço</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o vínculo de benefício com endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.ListPeriods(System.Int32)">
            <summary>
            Lista os ids dos períodos vínculados ao curso
            </summary>
            <param name="id">id do curso</param>
            <returns>Lista com os Ids dos períodos</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.AddPeriod(System.Int32,System.Int32)">
            <summary>
            Adiciona um período à um curso
            </summary>
            <param name="id">id do curso</param>
            <param name="idPeriod">id do período</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula um benefício com uma categoria</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseController.RemoveCategory(System.Int32,System.Int32)">
            <summary>
            Remove um período de um curso
            </summary>
            <param name="id">id do curso</param>
            <param name="idPeriod">id do período</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o vínculo de benefício com uma categoria</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.CourseGraduationTypeController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseGraduationTypeController.#ctor(ias.Rebens.ICourseGraduationTypeRepository)">
            <summary>
            Constructor
            </summary>
            <param name="courseGraduationTypeRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseGraduationTypeController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Lista os tipos de graduação conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="idOperation">Id da Operação</param>
            <returns>Lista com os tipos de graduação encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseGraduationTypeController.Get(System.Int32)">
            <summary>
            Retorna um tipo de graduação de curso
            </summary>
            <param name="id">Id do tipo de graduação de curso</param>
            <returns>Tipo de graduação</returns>
            <response code="200">Retorna o tipo de graduação de curso, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseGraduationTypeController.Put(ias.Rebens.api.Models.CourseGraduationTypeModel)">
            <summary>
            Atualiza um tipo de graduação de curso
            </summary>
            <param name="graduationType">Tipo de graduação de Curso</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseGraduationTypeController.Post(ias.Rebens.api.Models.CourseGraduationTypeModel)">
            <summary>
            Cria um tipo de graduação de curso
            </summary>
            <param name="graduationType">tipo de graduação</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id do tipo de graduação criado</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseGraduationTypeController.Delete(System.Int32)">
            <summary>
            Apaga um tipo de graduação de curso
            </summary>
            <param name="id">Id do tipo de graduação de curso a ser apagada</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.CourseModalityController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseModalityController.#ctor(ias.Rebens.ICourseModalityRepository)">
            <summary>
            Constructor
            </summary>
            <param name="courseModalityRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseModalityController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Lista as modalidades conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="idOperation">Id da Operação</param>
            <returns>Lista com as modalidades encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseModalityController.Get(System.Int32)">
            <summary>
            Retorna uma modalidade de curso
            </summary>
            <param name="id">Id da modalidade de curso</param>
            <returns>Modalidade</returns>
            <response code="200">Retorna a modalidade de curso, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseModalityController.Put(ias.Rebens.api.Models.CourseModalityModel)">
            <summary>
            Atualiza uma modalidade de curso
            </summary>
            <param name="modality">Modalidade de Curso</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseModalityController.Post(ias.Rebens.api.Models.CourseModalityModel)">
            <summary>
            Cria uma modalidade de curso
            </summary>
            <param name="modality"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id do período criado</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CourseModalityController.Delete(System.Int32)">
            <summary>
            Apaga uma modalidade de curso
            </summary>
            <param name="id">Id da modalidade de curso a ser apagada</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.CoursePeriodController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CoursePeriodController.#ctor(ias.Rebens.ICoursePeriodRepository)">
            <summary>
            Constructor
            </summary>
            <param name="coursePeriodRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CoursePeriodController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Lista os periodos conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="idOperation">Id da Operação</param>
            <returns>Lista com os períodos encontrados</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CoursePeriodController.Get(System.Int32)">
            <summary>
            Retorna um período de curso
            </summary>
            <param name="id">Id do período de curso</param>
            <returns>FAQ</returns>
            <response code="200">Retorna o período do curso, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CoursePeriodController.Put(ias.Rebens.api.Models.CoursePeriodModel)">
            <summary>
            Atualiza um período de curso
            </summary>
            <param name="period">Período de Curso</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CoursePeriodController.Post(ias.Rebens.api.Models.CoursePeriodModel)">
            <summary>
            Cria um período de curso
            </summary>
            <param name="period"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id do período criado</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CoursePeriodController.Delete(System.Int32)">
            <summary>
            Apaga um período de curso
            </summary>
            <param name="id">Id do período de curso a ser apagada</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.CustomerController">
            <summary>
            Customer Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CustomerController.#ctor(ias.Rebens.ICustomerRepository)">
            <summary>
            Constructor
            </summary>
            <param name="customerRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CustomerController.List(System.Nullable{System.Int32},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Retorna uma lista de endereços conforme os parametros
            </summary>
            <param name="idOperation">id da operação (default=null)</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Name, Id, Email, Birthday), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CustomerController.Get(System.Int32)">
            <summary>
            Retorna o endereço conforme o ID
            </summary>
            <param name="id">Id do cliente desejada</param>
            <returns>Endereço</returns>
            <response code="200">Retorna a categoria, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CustomerController.Post(ias.Rebens.api.Models.CustomerModel)">
            <summary>
            Cria um Cliente
            </summary>
            <param name="customer"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, e o Id do cliente criado</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CustomerController.Put(ias.Rebens.api.Models.CustomerModel)">
            <summary>
            Atualiza um Cliente
            </summary>
            <param name="customer"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CustomerReferalController.#ctor(ias.Rebens.ICustomerReferalRepository,ias.Rebens.ICustomerRepository,ias.Rebens.IOperationRepository,ias.Rebens.IStaticTextRepository)">
            <summary>
            
            </summary>
            <param name="customerReferalRepository"></param>
            <param name="customerRepository"></param>
            <param name="operationRepository"></param>
            <param name="staticTextRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CustomerReferalController.List(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista as Indicações conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Email, Status), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com as Indicações encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CustomerReferalController.Get(System.Int32)">
            <summary>
            Retorna uma Indicação
            </summary>
            <param name="id">Id do banner desejada</param>
            <returns>Banner</returns>
            <response code="200">Retorna o banner, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CustomerReferalController.Put(ias.Rebens.api.Models.CustomerReferalModel)">
            <summary>
            Atualiza uma indicação
            </summary>
            <param name="customerReferal">indicação</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CustomerReferalController.Post(ias.Rebens.api.Models.CustomerReferalModel)">
            <summary>
            Cria uma Indicação
            </summary>
            <param name="customerReferal">Indicação</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da indicação criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.CustomerReferalController.Delete(System.Int32)">
            <summary>
            Apaga uma indicação
            </summary>
            <param name="id">Id da indicação a ser apagado</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.FaqController">
            <summary>
            Faq Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.#ctor(ias.Rebens.IFaqRepository)">
            <summary>
            Constructor
            </summary>
            <param name="faqRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Lista as perguntas de faq conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Question, Answer, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="idOperation">Id da Operação</param>
            <returns>Lista com as faqs encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.Get(System.Int32)">
            <summary>
            Retorna uma pergunta
            </summary>
            <param name="id">Id da pergunta desejada</param>
            <returns>FAQ</returns>
            <response code="200">Retorna a faq, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.Put(ias.Rebens.api.Models.FaqModel)">
            <summary>
            Atualiza uma pergunta
            </summary>
            <param name="faq">FAQ</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.Post(ias.Rebens.api.Models.FaqModel)">
            <summary>
            Cria uma pergunta
            </summary>
            <param name="faq"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da faq criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.FaqController.Delete(System.Int32)">
            <summary>
            Apaga uma pergunta
            </summary>
            <param name="id">Id da pergunta a ser apagada</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.HelperController">
            <summary>
            Helper Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.#ctor(Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Helper controller constructor that receive the dependency injection of the repositories of Hosting Enviroment
            </summary>
            <param name="hostingEnvironment"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.ListBenefitType">
            <summary>
            Lista os tipos de benefício
            </summary>
            <returns></returns>
            <response code="200">Retorna a lista, ou algum erro, caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.ListIntegrationType">
            <summary>
            Lista os tipos de integração
            </summary>
            <returns></returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.ListOperationType">
            <summary>
            Lista os tipos de operação
            </summary>
            <returns></returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.ListStaticTextType">
            <summary>
            Lista os tipos de textos estáticos
            </summary>
            <returns></returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.ListBannerType">
            <summary>
            Lista os tipos de banner
            </summary>
            <returns></returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.UploadFile">
            <summary>
            recebe um arquivo e salva no servidor
            </summary>
            <returns></returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se ocorrer algum erro</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.HelperController.SendEmail(ias.Rebens.api.Models.EmailModel)">
            <summary>
            envia um email
            </summary>
            <param name="email">Email</param>
            <returns></returns>
            <response code="200">Retorna um modelo, ou algum erro caso interno</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.LogErrorController">
            <summary>
            LogError Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.LogErrorController.#ctor(ias.Rebens.ILogErrorRepository)">
            <summary>
            Constructor
            </summary>
            <param name="logErrorRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.LogErrorController.List(System.String,System.Int32,System.Int32)">
            <summary>
            Lista os logs com paginação
            </summary>
            <param name="token"></param>
            <param name="page"></param>
            <param name="pageItems"></param>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.LogErrorController.Clear(System.String)">
            <summary>
            Limpa todos os logs
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.MoipNotificationController.Post(System.String,ias.Rebens.api.Models.MoipNotificationModel)">
            <summary>
            Webhook
            </summary>
            <param name="notification"></param>
            <param name="Authorization"></param>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Controllers.OperationController">
            <summary>
            Operation Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.#ctor(ias.Rebens.IOperationRepository,ias.Rebens.IContactRepository,ias.Rebens.IAddressRepository,ias.Rebens.IFaqRepository,ias.Rebens.IStaticTextRepository,ias.Rebens.IBannerRepository,ias.Rebens.IOperationCustomerRepository,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILogger{ias.Rebens.api.Controllers.OperationController},ias.Rebens.ILogErrorRepository)">
            <summary>
            Construtor
            </summary>
            <param name="operationRepository">Injeção de dependencia do repositório de operação</param>
            <param name="contactRepository">Injeção de dependencia do repositório de contato</param>
            <param name="addressRepository">Injeção de dependencia do repositório de endereço</param>
            <param name="faqRepository">Injeção de dependencia do repositório de faq</param>
            <param name="staticTextRepository">Injeção de dependencia do repositório de Texto</param>
            <param name="bannerRepository">Injeção de dependencia do repositório de Banner</param>
            <param name="operationCustomerRepository">Injeção de dependencia do repositório de Clientes da operação</param>
            <param name="hostingEnvironment">Injeção de dependencia do repositório de Clientes da operação</param>
            <param name="logger">Injeção de dependencia do repositório de Clientes da operação</param>
            <param name="logError">Injeção de dependencia do repositório de Clientes da operação</param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Lista todas as operações com paginação
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Domain, Title, CompanyName, CompanyDoc), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="active">active, não obrigatório (default=null)</param>
            <returns>Lista com as operações encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.Get(System.Int32)">
            <summary>
            Retorna a operação conforme o ID
            </summary>
            <param name="id">Id da operação desejada</param>
            <returns>Operação</returns>
            <response code="200">Retorna a operação, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.Put(ias.Rebens.api.Models.OperationModel)">
            <summary>
            Atualiza uma operação
            </summary>
            <param name="operation"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.Post(ias.Rebens.api.Models.OperationModel)">
            <summary>
            Cria uma operação
            </summary>
            <param name="operation"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id e o Código da operação criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.Publish(System.Int32,System.Boolean)">
            <summary>
            Coloca uma operação na fila de publicação
            </summary>
            <param name="id">id da operação</param>
            <param name="isTemporary">Boolean informando se é para publicar o temporário ou o site definitivo. (default = false)</param>
            <returns></returns>
            <response code="200">Opreação em fila</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.BuilderDone(System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
            <response code="200"></response>
            <response code="400"></response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.GetConfiguration(System.Int32)">
            <summary>
            Retorna o objeto com as configurações da operação
            </summary>
            <param name="id">id da operação</param>
            <returns>Retorna o objeto com as configurações da operação</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.SaveConfiguration(System.Int32,System.Object)">
            <summary>
            Salva as configurações de publicação da Operação
            </summary>
            <param name="id">id da operação</param>
            <param name="data">configurações</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Configurações salva com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.ListContacts(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os contatos de uma operação
            </summary>
            <param name="id">id da operação</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Email, JobTitle), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os contatos encontradas</returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.AddContact(ias.Rebens.api.Models.OperationContactModel)">
            <summary>
            Adiciona um contato a uma operação
            </summary>
            <param name="model">{ idOperation: 0, idContact: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula uma operação com um contato</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.RemoveContact(System.Int32,System.Int32)">
            <summary>
            Remove um contato de uma operação
            </summary>
            <param name="id">id da operação</param>
            <param name="idContact">id do contato</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o vínculo de benefício com endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.ListAddress(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os endereço de uma Operação
            </summary>
            <param name="id">id da operação</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Street, City, State), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.AddAddress(ias.Rebens.api.Models.OperationAddressModel)">
            <summary>
            Adiciona um endereço a uma operação
            </summary>
            <param name="model">{ idOperation: 0, idAddress: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula um parceiro com um endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.RemoveAddress(System.Int32,System.Int32)">
            <summary>
            Remove um endereço de uma operação
            </summary>
            <param name="id">id da operação</param>
            <param name="idAddress">id do endereço</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o vínculo de benefício com endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.ListFaqs(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista as perguntas de uma operação 
            </summary>
            <param name="id">id da operação</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Question, Answer, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>lista das Perguntas da operação</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.ListStaticText(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os textos de uma operação 
            </summary>
            <param name="id">id da operação</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Title, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>lista dos Textos da operação</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.ReadStaticText(System.Int32,System.Int32)">
            <summary>
            Retorna um texto pelo tipo e operação
            </summary>
            <param name="id">id da operação</param>
            <param name="idType">id do tipo de texto</param>
            <returns>Texto</returns>
            <response code="200">Retorna o Texto, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.ListBanners(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os banners de uma operação 
            </summary>
            <param name="id">id da operação</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>lista dos banners da operação</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.ListCustomers(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os clientes pré cadastrados de uma operação 
            </summary>
            <param name="id">id da operação</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>lista dos banners da operação</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.DeleteCustomer(System.Int32,System.Int32)">
            <summary>
            Apaga um cliente pré cadastrado
            </summary>
            <param name="id">id da operação</param>
            <param name="idCustomer">id do cliente</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Cliente foi apagado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.CreateCustomer(System.Int32,ias.Rebens.api.Models.OperationCustomerModel)">
            <summary>
            Cria um cliente pré
            </summary>
            <param name="id">Id da operação</param>
            <param name="customer"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da faq criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationController.CreateListOfCustomers(System.Int32)">
            <summary>
            Cria uma list de cliente pré, a partir de um arquivo excel
            </summary>
            <param name="id">Id da operação</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da faq criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.OperationPartnerController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationPartnerController.#ctor(ias.Rebens.IOperationPartnerRepository,ias.Rebens.IStaticTextRepository)">
            <summary>
            Construtor
            </summary>
            <param name="operationPartnerRepository">Injeção de dependencia do repositório de parceiro</param>
            <param name="staticTextRepository">Injeção de dependencia do repositório de textos</param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationPartnerController.Get(System.Int32)">
            <summary>
            Retorna o parceiro da operação conforme o ID
            </summary>
            <param name="id">Id do parceiro desejada</param>
            <returns>Parceiro da Operação</returns>
            <response code="200">Retorna o parceiro, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationPartnerController.List(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Lista todas os parceiros de uma operação com paginação
            </summary>
            <param name="idOperation">id da operação, obrigatório</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="active">active, não obrigatório (default=null)</param>
            <returns>Lista com os parceiros da operação encontrados</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationPartnerController.Put(ias.Rebens.api.Models.OperationPartnerModel)">
            <summary>
            Atualiza um parceiro da operação
            </summary>
            <param name="partner"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationPartnerController.Post(ias.Rebens.api.Models.OperationPartnerModel)">
            <summary>
            Cria um parceiro de uma  operação
            </summary>
            <param name="partner"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id e o Código do parceiro criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationPartnerController.Delete(System.Int32)">
            <summary>
            Apaga um parceiro de uma operação
            </summary>
            <param name="id">Id do parceiro a ser apagado</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationPartnerController.ListCustomers(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Lista os clientes de um parceiro da operação 
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="status">Status do cliente (Novo = 1, Aprovado = 2, Reprovado = 3, Cadastrado = 4), (default = null)</param>
            <param name="idOperation">id da operação</param>
            <param name="idOperationPartner">id do parceiro da operação</param>
            <returns>lista dos banners da operação</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationPartnerController.SaveCustomer(ias.Rebens.api.Models.OperationPartnerCustomerModel)">
            <summary>
            Cria um cliente de um parceiro da operação
            </summary>
            <param name="customer"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id e o Código do cliente criado</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.OperationPartnerController.UpdateCustomerStatus(System.Int32,System.Int32)">
            <summary>
            Atualiza o status de cliente do parceiro da operação
            </summary>
            <param name="idCustomer">Id do cliente</param>
            <param name="status">Satus (Aprovado = 2, Reprovado = 3)</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.PartnerController">
            <summary>
            Partner Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.#ctor(ias.Rebens.IPartnerRepository,ias.Rebens.IContactRepository,ias.Rebens.IAddressRepository,ias.Rebens.IBenefitRepository,ias.Rebens.IStaticTextRepository)">
            <summary>
            Construtor
            </summary>
            <param name="partnerRepository">Injeção de dependencia do repositório de parceiros</param>
            <param name="contactRepository">Injeção de dependencia do repositório de contato</param>
            <param name="addressRepository">Injeção de dependencia do repositório de endereço</param>
            <param name="benefitRepository">Injeção de dependencia do repositório de benefício</param>
            <param name="staticTextRepository">Injeção de dependencia do repositório de benefício</param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Lista todos os parceiros com paginação
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="active">Active não obrigatório (default=null)</param>
            <returns>Lista com os parceiros encontrados</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.Get(System.Int32)">
            <summary>
            Retorna o parceiro conforme o ID
            </summary>
            <param name="id">Id do parceiro</param>
            <returns>Parceiros</returns>
            <response code="200">Retorna o parceiro, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.Put(ias.Rebens.api.Models.PartnerModel)">
            <summary>
            Atualiza um parceiro
            </summary>
            <param name="partner"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.Post(ias.Rebens.api.Models.PartnerModel)">
            <summary>
            Cria um parceiro
            </summary>
            <param name="partner"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id do parceiro criado</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.Delete(System.Int32)">
            <summary>
            Apaga um parceiro
            </summary>
            <param name="id">Id do parceiro a ser apagado</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.ListContacts(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os contatos de um parceiro
            </summary>
            <param name="id">id do parceiro</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Email, JobTitle), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os contatos encontradas</returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.ListAddress(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os endereço de um parceiro
            </summary>
            <param name="id">id do parceiro</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Name, Street, City, State), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.AddContact(ias.Rebens.api.Models.PartnerContactModel)">
            <summary>
            Adiciona um contato a um parceiro
            </summary>
            <param name="model">{ idPartner: 0, idContact: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula um parceiro com um contato</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.RemoveContact(System.Int32,System.Int32)">
            <summary>
            Remove um contato de um parceiro
            </summary>
            <param name="id">id do parceiro</param>
            <param name="idContact">id do contato</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o vínculo de benefício com endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.AddAddress(ias.Rebens.api.Models.PartnerAddressModel)">
            <summary>
            Adiciona um endereço a um parceiro
            </summary>
            <param name="model">{ idPartner: 0, idAddress: 0 }</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Víncula um parceiro com um endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.RemoveAddress(System.Int32,System.Int32)">
            <summary>
            Remove um endereço de um parceiro
            </summary>
            <param name="id">id do parceiro</param>
            <param name="idAddress">id do endereço</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem.</returns>
            <response code="200">Remove o vínculo de benefício com endereço</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PartnerController.ListBenefits(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os endereço de um parceiro
            </summary>
            <param name="id">id do parceiro</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Title), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os benefícios encontradas</returns>
            <response code="200">Retorna a list, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Controllers.PortalController">
            <summary>
            Portal Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.#ctor(ias.Rebens.IBannerRepository,ias.Rebens.IBenefitRepository,ias.Rebens.IFaqRepository,ias.Rebens.IFormContactRepository,ias.Rebens.IOperationRepository,ias.Rebens.IFormEstablishmentRepository,ias.Rebens.ICustomerRepository,ias.Rebens.IAddressRepository,ias.Rebens.IWithdrawRepository,ias.Rebens.IBenefitUseRepository,ias.Rebens.IStaticTextRepository,ias.Rebens.ICouponRepository,ias.Rebens.IMoipRepository,ias.Rebens.ICustomerReferalRepository,ias.Rebens.IOperationCustomerRepository,ias.Rebens.IBenefitViewRepository,ias.Rebens.IBankAccountRepository,ias.Rebens.IOperationPartnerRepository)">
            <summary>
            
            </summary>
            <param name="bannerRepository"></param>
            <param name="benefitRepository"></param>
            <param name="faqRepository"></param>
            <param name="formContactRepository"></param>
            <param name="operationRepository"></param>
            <param name="formEstablishmentRepository"></param>
            <param name="customerRepository"></param>
            <param name="addressRepository"></param>
            <param name="withdrawRepository"></param>
            <param name="benefitUseRepository"></param>
            <param name="staticTextRepository"></param>
            <param name="couponRepository"></param>
            <param name="moipRepository"></param>
            <param name="customerReferalRepository"></param>
            <param name="operationCustomerRepository"></param>
            <param name="benefitViewRepository"></param>
            <param name="bankAccountRepository"></param>
            <param name="operationPartnerRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.GetHomeLocked(System.String)">
            <summary>
            Retorna os items da home não logada
            </summary>
            <param name="operationCode">código da operação</param>
            <returns>Retorna os items necessários para montar a home não logada</returns>
            <response code="200">Retorna o model com os items da home não logada, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.GetText(System.String,System.String)">
            <summary>
            Retorna o texto da página requerida
            </summary>
            <param name="operationCode">código da operação</param>
            <param name="page">Página requerida</param>
            <returns>Retorna o objeto StaticText com as informações solicitadas</returns>
            <response code="200">Retorna o model, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.ContactForm(System.String,ias.Rebens.api.Models.FormContactModel)">
            <summary>
            Salvar um contato
            </summary>
            <param name="operationCode"></param>
            <param name="formContact"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da faq criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.EstablishmentForm(System.String,ias.Rebens.api.Models.FormEstablishmentModel)">
            <summary>
            Salvar um formulário de indicação de benefícios
            </summary>
            <param name="operationCode"></param>
            <param name="formEstablishment"></param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da faq criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.Login(System.String,ias.Rebens.api.Models.LoginModel,ias.Rebens.api.helper.SigningConfigurations,ias.Rebens.api.helper.TokenOptions)">
            <summary>
            Autentica um usuário na api
            </summary>
            <param name="operationCode"></param>
            <param name="model"></param>
            <param name="signingConfigurations"></param>
            <param name="tokenConfigurations"></param>
            <returns>O token e o usuário</returns>
            <respons code="200">se o usuário logar</respons>
            <respons code="400">se não encontrar o usuário ou a senha não estiver correta</respons>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.Home">
            <summary>
            Retorna os items da home logada
            </summary>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.ListBenefits(System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos os benefícios da operação com paginação
            </summary>
            <param name="idCategory">categoria, não obrigatório (default=null)</param>
            <param name="idBenefitType">tipo de benefício, separado por vírgula, não obrigatório (default=null)</param>
            <param name="latitude">latitude do usuário (default=null)</param>
            <param name="longitude">longitude do usuário (default=null)</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Title), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <returns>Lista com os benefícios encontrados</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.GetBenefit(System.Int32)">
            <summary>
            Retorna o benefício conforme o ID
            </summary>
            <param name="id">Id do benefício</param>
            <returns>Parceiros</returns>
            <response code="200">Retorna o benefício, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.CustomerCreate(System.String,ias.Rebens.api.Models.CustomerModel)">
            <summary>
            Cria um novo cliente
            </summary>
            <param name="operationCode"></param>
            <param name="customer"></param>
            <returns></returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.SignUp(System.String,ias.Rebens.api.Models.SignUpModel)">
            <summary>
            Cria um novo cliente
            </summary>
            <param name="operationCode"></param>
            <param name="signUp"></param>
            <returns></returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.ValidateCustomer(System.String,ias.Rebens.api.Models.ValidateCustomerModel,ias.Rebens.api.helper.SigningConfigurations,ias.Rebens.api.helper.TokenOptions)">
            <summary>
            Cria um novo cliente
            </summary>
            <param name="operationCode"></param>
            <param name="validateCustomer"></param>
            <param name="signingConfigurations"></param>
            <param name="tokenConfigurations"></param>
            <returns></returns>
            <response code="200">Se o cliente for validado com sucesso já é retornado o token</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.CustomerUpdate(ias.Rebens.api.Models.CustomerModel,ias.Rebens.api.helper.SigningConfigurations,ias.Rebens.api.helper.TokenOptions)">
            <summary>
            Atualiza um cliente
            </summary>
            <param name="customer"></param>
            <param name="signingConfigurations"></param>
            <param name="tokenConfigurations"></param>
            <returns></returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.ChangePassword(ias.Rebens.api.Models.ChangePasswordModel)">
            <summary>
            Altera a senha do cliente
            </summary>
            <param name="model">{ Id: id do cliente, OldPassword: senha antiga, NewPassword: nova senha, NewPasswordConfirm: confirmação da nova senha }</param>
            <returns></returns>
            <respons code="200"></respons>
            <respons code="400"></respons>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.RememberPassword(System.String,System.String)">
            <summary>
            Lembrete de senha
            </summary>
            <param name="operationCode"></param>
            <param name="email">Email</param>
            <returns></returns>
            <respons code="200"></respons>
            <respons code="400"></respons>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.GetCustomer">
            <summary>
            Retorna o cliente conforme o ID
            </summary>
            <returns>Parceiros</returns>
            <response code="200">Retorna o cliente, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.GetWithdrawSummary">
            <summary>
            Retorna as informações necessárias para a página de Resgate
            </summary>
            <returns></returns>
            <response code="200">Retorna o resumo para página de resgate, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.ListBenefitHistory(System.Int32,System.Int32)">
            <summary>
            Retorna o histórico de Benefícios do usuário logado
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <returns></returns>
            <response code="200">Retorna o histórico de benefícios, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.Withdraw(ias.Rebens.api.Models.WithdrawModel)">
            <summary>
            Registra um resgate
            </summary>
            <param name="withdraw"></param>
            <returns></returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.ListWithdraw(System.Int32,System.Int32)">
            <summary>
            Retorna o histórico de Resgates do cliente logado
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <returns></returns>
            <response code="200">Retorna o histórico de resgates do cliente, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.ListCoupons(System.Int32,System.Int32)">
            <summary>
            Retorna o histórico de Cupons do cliente logado
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <returns></returns>
            <response code="200">Retorna o histórico de cupons do cliente, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.ListUnmissableBanners">
            <summary>
            Retorna a lista com os banners imperdíveis
            </summary>
            <returns></returns>
            <response code="200">Retorna a lista com os banners Imperdíveis, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.Faq(System.String)">
            <summary>
            Retorna as perguntas e respostas da página faq
            </summary>
            <returns></returns>
            <response code="200">Retorna as perguntas e respostas da página faq, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.ListPayments(System.Int32,System.Int32)">
            <summary>
            Retorna uma lista com o histórico de pagamento do cliente
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <returns>Lista com o histórico de pagamento</returns>
            <response code="200">Retorna a lista com o histórico de pagamento, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.ListOperationPartners(System.String)">
            <summary>
            Retorna uma lista com os parceiros da operação
            </summary>
            <param name="operationCode">código da operação, obrigatório</param>
            <returns>Lista com os parceiros</returns>
            <response code="200">Retorna a lista com os parceiros, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.PortalController.SaveOperationPartnerCustomer(System.String,ias.Rebens.api.Models.OperationPartnerCustomerModel)">
            <summary>
            Cria um novo cliente
            </summary>
            <param name="operationCode"></param>
            <param name="model"></param>
            <returns></returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ReportController.#ctor(ias.Rebens.IReportRepository)">
            <summary>
            
            </summary>
            <param name="reportRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ReportController.LoadDashboard">
            <summary>
            Método que retorna as informações necessárias para montar o dashboard do admin
            </summary>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ReportController.ListCustomers(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Relatório de clientes cadastrados no sistema
            </summary>
            <param name="idOperation">id da operação (default=null)</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Name, Id, Email, Birthday), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="idPartner">id do parceiro (default=null)</param>
            <param name="status">status do cliente (default=null)</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Controllers.ReportController.ListBenefitUse(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Relatório de clientes cadastrados no sistema
            </summary>
            <param name="idOperation">id da operação (default=null)</param>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Name, Id, Email, Birthday), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="startDate">Filtro data inicial</param>
            <param name="endDate">Filtro data final</param>
            <returns>Lista com os endereços encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Controllers.StaticTextController">
            <summary>
            StaticText Controller
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Controllers.StaticTextController.#ctor(ias.Rebens.IStaticTextRepository)">
            <summary>
            Static Text Controller Construction
            </summary>
            <param name="staticTextRepository"></param>
        </member>
        <member name="M:ias.Rebens.api.Controllers.StaticTextController.List(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Lista os textos conforme os parametros
            </summary>
            <param name="page">página, não obrigatório (default=0)</param>
            <param name="pageItems">itens por página, não obrigatório (default=30)</param>
            <param name="sort">Ordenação campos (Id, Title, Order), direção (ASC, DESC)</param>
            <param name="searchWord">Palavra à ser buscada</param>
            <param name="idOperation">Id da operação (default=null)</param>
            <returns>Lista com os textos encontradas</returns>
            <response code="200">Retorna a lista, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.StaticTextController.Get(System.Int32)">
            <summary>
            Retorna um text
            </summary>
            <param name="id">Id do texto desejada</param>
            <returns>StaticText</returns>
            <response code="200">Retorna o texto, ou algum erro caso interno</response>
            <response code="204">Se não encontrar nada</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.StaticTextController.Put(ias.Rebens.api.Models.StaticTextModel)">
            <summary>
            Atualiza um texto
            </summary>
            <param name="staticText">StaticText</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for atualizado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.StaticTextController.Post(ias.Rebens.api.Models.StaticTextModel)">
            <summary>
            Cria um Texto
            </summary>
            <param name="staticText">StaticText</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem, caso ok, retorna o id da faq criada</returns>
            <response code="200">Se o objeto for criado com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="M:ias.Rebens.api.Controllers.StaticTextController.Delete(System.Int32)">
            <summary>
            Apaga um Texto
            </summary>
            <param name="id">Id do texto a ser apagado</param>
            <returns>Retorna um objeto com o status (ok, error), e uma mensagem</returns>
            <response code="200">Se o objeto for excluido com sucesso</response>
            <response code="400">Se ocorrer algum erro</response>
        </member>
        <member name="T:ias.Rebens.api.Models.AddressModel">
            <summary>
            Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Id">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Name">
            <summary>
            Nome do endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Street">
            <summary>
            Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Number">
            <summary>
            Número
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Complement">
            <summary>
            Complemento (sala, apto, etc)
            </summary> 
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Neighborhood">
            <summary>
            Bairro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.City">
            <summary>
            Cidade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.State">
            <summary>
            Estado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Country">
            <summary>
            País
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Zipcode">
            <summary>
            CEP
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Latitude">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AddressModel.Longitude">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.AddressModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.AddressModel.#ctor(ias.Rebens.Address)">
            <summary>
            Construtor que recebe um objeto Address e já popula os atributos
            </summary>
            <param name="addr"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.AddressModel.GetEntity">
            <summary>
            Retorna um objeto Address com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="P:ias.Rebens.api.Models.AdminUserModel.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AdminUserModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AdminUserModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AdminUserModel.LastLogin">
            <summary>
            Data Hora do último login do usuário
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AdminUserModel.Active">
            <summary>
            Status do usuário 
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AdminUserModel.IdOperation">
            <summary>
            Id da operação do usuário
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AdminUserModel.IdOperationPartner">
            <summary>
            Id do parceiros da operação 
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.AdminUserModel.Roles">
            <summary>
            Papéis do usuário
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.AdminUserModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.AdminUserModel.#ctor(ias.Rebens.AdminUser)">
            <summary>
            Construtor que recebe um AdminUser e popula os objetos
            </summary>
            <param name="adminUser"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.AdminUserModel.GetEntity">
            <summary>
            Retorna um objeto AdminUser com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.BalanceSummaryModel">
            <summary>
            Model da tela de Resgate
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BalanceSummaryModel.BlokedBalance">
            <summary>
            Saldo Bloqueado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BalanceSummaryModel.Total">
            <summary>
            Total
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BalanceSummaryModel.AvailableBalance">
            <summary>
            Saldo Disponível
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.BankAccountModel">
            <summary>
            Bank Account Model
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BankAccountModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BankAccountModel.IdBank">
            <summary>
            Id do Banco
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BankAccountModel.Type">
            <summary>
            Tipo de conta
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BankAccountModel.Branch">
            <summary>
            Agência
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BankAccountModel.AccountNumber">
            <summary>
            Conta Corrente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BankAccountModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BankAccountModel.BankName">
            <summary>
            Nome do Banco
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BankAccountModel.BankCode">
            <summary>
            Código do Banco
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BankAccountModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BankAccountModel.#ctor(ias.Rebens.BankAccount)">
            <summary>
            Construtor que recebe um BankAccount e popula os atributos
            </summary>
            <param name="account"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.BankAccountModel.GetEntity">
            <summary>
            Retorna um objeto BankAccount com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.BankModel">
            <summary>
            Bank model
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BankModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BankModel.Code">
            <summary>
            Código
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BankModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BankModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BankModel.#ctor(ias.Rebens.Bank)">
            <summary>
            Construtor que recebe um objeto Bank e popula os atributos
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.BannerModel">
            <summary>
            Banner
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.Image">
            <summary>
            Imagem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.Order">
            <summary>
            Ordem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.Link">
            <summary>
            Link
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.IdType">
            <summary>
            id Tipo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.Type">
            <summary>
            Tipo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.TargetBlank">
            <summary>
            TargetBlank?
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.IdBenefit">
            <summary>
            Id do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.IsBenefit">
            <summary>
            é de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.Start">
            <summary>
            Data de inicio
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.End">
            <summary>
            Data fim
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.StatusName">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.BannerShowHome">
            <summary>
            aparece na home
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.BannerShowHomeLogged">
            <summary>
            aparece na home
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerModel.BannerShowBenefit">
            <summary>
            aparece na home
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BannerModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BannerModel.#ctor(ias.Rebens.Banner)">
            <summary>
            Construtor que recebe um Banner e popula os atributos
            </summary>
            <param name="banner"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.BannerModel.GetEntity">
            <summary>
            Retorna um objeto Banner com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.BannerOperationModel">
            <summary>
            Associação Banner Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerOperationModel.IdBanner">
            <summary>
            Id do banner
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerOperationModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.BannerOperationItemModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerOperationItemModel.OperationName">
            <summary>
            Nome da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerOperationItemModel.Checked">
            <summary>
            Se a operação está vinculada com o benefício
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BannerOperationItemModel.#ctor">
            <summary>
            Construtor 
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BannerOperationItemModel.#ctor(ias.Rebens.BannerOperationItem)">
            <summary>
            Construtor que já populas as propriedades
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.BannerTypeModel">
            <summary>
            tipo de banner
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerTypeModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BannerTypeModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitAddressModel">
            <summary>
            Relacionamento Benefício com Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitAddressModel.IdBenefit">
            <summary>
            Id do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitAddressModel.IdAddress">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitCategoryModel">
            <summary>
            Relacionamento Beneficio com Categoria
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitCategoryModel.IdBenefit">
            <summary>
            Id do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitCategoryModel.IdCategory">
            <summary>
            Id da categoria
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitCategoriesModel">
            <summary>
            Relacionamento Beneficio com Categoria
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitCategoriesModel.IdBenefit">
            <summary>
            Id do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitCategoriesModel.CategoryIds">
            <summary>
            ids das categorias selecionadas separado por ','
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitModel">
            <summary>
            Benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Name">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Title">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Image">
            <summary>
            Imagem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.DueDate">
            <summary>
            Data de validade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.MaxDiscountPercentage">
            <summary>
            Porcentagem máxima de desconto
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.CpvPercentage">
            <summary>
            Porcentagem de CPV
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.MinDiscountPercentage">
            <summary>
            Porcentagem mínima de desconto
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.CashbackAmount">
            <summary>
            Valor do cashback
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Start">
            <summary>
            Início
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.End">
            <summary>
            Fim
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.IdBenefitType">
            <summary>
            Id Tipo de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.BenefitType">
            <summary>
            Tipo de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Exclusive">
            <summary>
            É um benefício exclusivo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.IdIntegrationType">
            <summary>
            Id Tipo de Integração
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.IdPartner">
            <summary>
            Id do parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.PartnerImage">
            <summary>
            Logo do Parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.PartnerDescription">
            <summary>
            Descrição do Parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.IntegrationType">
            <summary>
            Tipo de Integração
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.BenefitCall">
            <summary>
            Chamada do Benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Detail">
            <summary>
            Detalhes
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.HowToUse">
            <summary>
            Como Utilizar
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.Link">
            <summary>
            Link do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.VoucherText">
            <summary>
            Texto do Voucher
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.IdOperation">
            <summary>
            Id da operação quando o benefício é exclusivo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.HomeHighlight">
            <summary>
            Se deve aparecer na home
            -1 - não aparece
            0 - aparece randomicamente
            1 a 8 - aparece na posição escolhida
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.HomeBenefitHighlight">
            <summary>
            Se deve aparecer na home benefícios
            -1 - não aparece
            0 - aparece randomicamente
            1 a 12 - aparece na posição escolhida
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitModel.StatusName">
            <summary>
            Status
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitModel.#ctor(ias.Rebens.Benefit,System.Nullable{System.Int32})">
            <summary>
            Construtor que recebe um Benefício e já popula os atributos
            </summary>
            <param name="benefit"></param>
            <param name="idCustomer"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitModel.GetEntity">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitModel.GetDetail">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitModel.GetHowToUse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitListItem">
            <summary>
            Benefit List Item
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitListItem.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitListItem.Title">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitListItem.Image">
            <summary>
            Imagem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitListItem.IdBenefitType">
            <summary>
            Id Tipo de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitListItem.BenefitType">
            <summary>
            Tipo de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitListItem.BenefitCall">
            <summary>
            Chamada do Benefício
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitListItem.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitListItem.#ctor(ias.Rebens.Benefit)">
            <summary>
            Construtor que recebe um Benefício e já popula os atributos
            </summary>
            <param name="benefit"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitItem">
            <summary>
            Item simplificado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitItem.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitItem.Title">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitItem.Name">
            <summary>
            Título
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitItem.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitItem.#ctor(ias.Rebens.Benefit)">
            <summary>
            Construtor que recebe um Benefício e já popula os atributos
            </summary>
            <param name="benefit"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitListUseItem">
            <summary>
            Item simplificado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitListUseItem.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitListUseItem.Title">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitListUseItem.Name">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitListUseItem.TotalUse">
            <summary>
            Total utilizado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitListUseItem.StatusName">
            <summary>
            Status
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitListUseItem.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitListUseItem.#ctor(ias.Rebens.BenefitReportItem)">
            <summary>
            Construtor que recebe um Benefício e já popula os atributos
            </summary>
            <param name="benefit"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitOperationModel">
            <summary>
            Relacionamento Benefício com Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitOperationModel.IdBenefit">
            <summary>
            Id do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitOperationModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitOperationModel.IdPosition">
            <summary>
            Id da posição
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitOperationModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitOperationItemModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitOperationItemModel.OperationName">
            <summary>
            Nome da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitOperationItemModel.Checked">
            <summary>
            Se a operação está vinculada com o benefício
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitOperationItemModel.#ctor">
            <summary>
            Construtor 
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitOperationItemModel.#ctor(ias.Rebens.BenefitOperationItem)">
            <summary>
            Construtor que já populas as propriedades
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.PositionModel">
            <summary>
            Posição
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PositionModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PositionModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PositionModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.PositionModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.PositionModel.#ctor(ias.Rebens.BenefitOperationPosition)">
            <summary>
            Construtor que recebe um objeto e já popula os atributos.
            </summary>
            <param name="benefitOperationPosition"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitTypeModel">
            <summary>
            Tipo de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitTypeModel.Id">
            <summary>
            Id do tipo de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitTypeModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitTypeModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitTypeModel.#ctor(ias.Rebens.Enums.BenefitType)">
            <summary>
            Construtor que recebe um BenefitType e popula os atributos
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.BenefitUseModel">
            <summary>
            Model Uso Benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitUseModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitUseModel.IdCustomer">
            <summary>
            Id do Cliente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitUseModel.IdBenefit">
            <summary>
            Id do Benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitUseModel.Name">
            <summary>
            Nome do Benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitUseModel.IdBenefitType">
            <summary>
            Id do Typo de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitUseModel.BenefitType">
            <summary>
            Typo de benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitUseModel.Amount">
            <summary>
            Valor da compra
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitUseModel.Comission">
            <summary>
            Comissão
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitUseModel.IdStatus">
            <summary>
            Id do Status
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitUseModel.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.BenefitUseModel.Date">
            <summary>
            Data
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitUseModel.#ctor">
            <summary>
            Contrutor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.BenefitUseModel.#ctor(ias.Rebens.BenefitUse)">
            <summary>
            Construtor
            </summary>
            <param name="benefitUse"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.CategoryModel">
            <summary>
            Categoria
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Id">
            <summary>
            Id da categoria
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Order">
            <summary>
            Ordem que ela deve aparecer
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.IdParent">
            <summary>
            Id do pai, caso seja uma subcategoria, caso contrário null
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Icon">
            <summary>
            Ícone, nome da imagem representando o ícone
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Active">
            <summary>
            Se está ativa ou inativa
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.Categories">
            <summary>
            Lista de categorias filhas, caso seja uma categoria pai
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryModel.StatusName">
            <summary>
            Status
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CategoryModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CategoryModel.#ctor(ias.Rebens.Category)">
            <summary>
            Construtor que recebe um objeto Category e já popula os atributos
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.CategoryModel.GetEntity">
            <summary>
            Retorna um objeto Categoria com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.CategoryItemModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CategoryItemModel.Checked">
            <summary>
            Retorna se a categoria está selecionada
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CategoryItemModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CategoryItemModel.#ctor(ias.Rebens.CategoryItem)">
            <summary>
            Construtor que já popula as propriedades
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.ChangePasswordModel">
            <summary>
            Alteração de senha
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ChangePasswordModel.OldPassword">
            <summary>
            Senha antiga
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ChangePasswordModel.NewPassword">
            <summary>
            Nova senha
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ChangePasswordModel.NewPasswordConfirm">
            <summary>
            Confirmação da nova senha
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.ContactModel">
            <summary>
            Contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.Id">
            <summary>
            Id do contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.Name">
            <summary>
            Nome do contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.JobTitle">
            <summary>
            Profissão
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.Phone">
            <summary>
            Telefone
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.CellPhone">
            <summary>
            Celular
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.IdAddress">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ContactModel.Address">
            <summary>
            Endereço
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.ContactModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.ContactModel.#ctor(ias.Rebens.Contact)">
            <summary>
            Construtor que recebe um objeto Contact e popula os atributos
            </summary>
            <param name="contact"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.ContactModel.GetEntity">
            <summary>
            Retorna um objeto Contact com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.CouponModel">
            <summary>
            Model de cupom
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CouponModel.Id">
            <summary>
            Id 
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CouponModel.Campaign">
            <summary>
            Campanha
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CouponModel.Code">
            <summary>
            Código
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CouponModel.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CouponModel.PlayedDate">
            <summary>
            Data que foi jogado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CouponModel.ValidationDate">
            <summary>
            Data de validação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CouponModel.Prize">
            <summary>
            Prêmio
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CouponModel.Date">
            <summary>
            Data do Cupom
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CouponModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CouponModel.#ctor(ias.Rebens.Coupon)">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.CourseCollegeModel">
            <summary>
            Faculdade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseCollegeModel.Id">
            <summary>
            Id da Faculdade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseCollegeModel.Name">
            <summary>
            Nome da Faculdade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseCollegeModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseCollegeModel.Active">
            <summary>
            Se a Faculdade está ativa ou não
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseCollegeModel.Logo">
            <summary>
            Logo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseCollegeModel.Addresses">
            <summary>
            Endereços da Faculdade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseCollegeModel.Address">
            <summary>
            Endereço da Faculdade
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseCollegeModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseCollegeModel.#ctor(ias.Rebens.CourseCollege)">
            <summary>
            Construtor que recebe um objeto CourseGraduationType e popula os atributos
            </summary>
            <param name="courseCollege"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseCollegeModel.GetEntity">
            <summary>
            Retorna um objeto CourseCollege com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.CourseCollegeAddressModel">
            <summary>
            Relacionamento Faculdade com Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseCollegeAddressModel.IdCourseCollege">
            <summary>
            Id da faculdade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseCollegeAddressModel.IdAddress">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.CourseGraduationTypeModel">
            <summary>
            Modalidade de curso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseGraduationTypeModel.Id">
            <summary>
            Id do tipo de graduação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseGraduationTypeModel.Name">
            <summary>
            Nome do tipo de graduação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseGraduationTypeModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseGraduationTypeModel.Active">
            <summary>
            Se o tipo de graduação está ativa ou não
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseGraduationTypeModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseGraduationTypeModel.#ctor(ias.Rebens.CourseGraduationType)">
            <summary>
            Construtor que recebe um objeto CourseGraduationType e popula os atributos
            </summary>
            <param name="courseGraduationType"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseGraduationTypeModel.GetEntity">
            <summary>
            Retorna um objeto CourseGraduationType com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.CourseModalityModel">
            <summary>
            Modalidade de curso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModalityModel.Id">
            <summary>
            Id da modalidade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModalityModel.Name">
            <summary>
            Nome da modalidade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModalityModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModalityModel.Active">
            <summary>
            Se a modalidade está ativa ou não
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseModalityModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseModalityModel.#ctor(ias.Rebens.CourseModality)">
            <summary>
            Construtor que recebe um objeto CourseModality e popula os atributos
            </summary>
            <param name="coursePeriod"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseModalityModel.GetEntity">
            <summary>
            Retorna um objeto CourseModality com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.CourseModel">
            <summary>
            Faculdade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.Id">
            <summary>
            Id da Faculdade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.Title">
            <summary>
            Título do curso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.IdCollege">
            <summary>
            Id da faculdade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.IdGradutaionType">
            <summary>
            Id do tipo de graduação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.IdModality">
            <summary>
            Id da modalidade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.OriginalPrice">
            <summary>
            Preço original
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.Discount">
            <summary>
            Desconto %
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.FinalPrice">
            <summary>
            Preço Final
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.Duration">
            <summary>
            Duração do curso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.Image">
            <summary>
            Imagem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.Rating">
            <summary>
            Nota
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.DueDate">
            <summary>
            Validade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.StartDate">
            <summary>
            Inicio
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.EndDate">
            <summary>
            Fim
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.VoucherText">
            <summary>
            Texto do voucher
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.Active">
            <summary>
            Se a Faculdade está ativa ou não
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.Addresses">
            <summary>
            Endereços da Faculdade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.Address">
            <summary>
            Endereço da Faculdade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.Periods">
            <summary>
            Periodos do curso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseModel.Description">
            <summary>
            Descrição do curso
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseModel.#ctor(ias.Rebens.Course)">
            <summary>
            Construtor que recebe um objeto Course e popula os atributos
            </summary>
            <param name="course"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseModel.GetEntity">
            <summary>
            Retorna um objeto Course com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="M:ias.Rebens.api.Models.CourseModel.GetDescription">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.CourseAddressModel">
            <summary>
            Relacionamento Curso com Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseAddressModel.IdCourse">
            <summary>
            Id do curso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseAddressModel.IdAddress">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.CourseCoursePeriodModel">
            <summary>
            Relacionamento Curso com Periodo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseCoursePeriodModel.IdCourse">
            <summary>
            Id do curso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CourseCoursePeriodModel.IdPeriod">
            <summary>
            Id do periodo
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.CoursePeriodModel">
            <summary>
            Período de curso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CoursePeriodModel.Id">
            <summary>
            Id do período
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CoursePeriodModel.Name">
            <summary>
            Nome do período
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CoursePeriodModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CoursePeriodModel.Active">
            <summary>
            Se o período está ativo ou não
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CoursePeriodModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CoursePeriodModel.#ctor(ias.Rebens.CoursePeriod)">
            <summary>
            Construtor que recebe um objeto CoursePeriod e popula os atributos
            </summary>
            <param name="coursePeriod"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.CoursePeriodModel.GetEntity">
            <summary>
            Retorna um objeto CoursePeriod com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.CustomerModel">
            <summary>
            Cliente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Surname">
            <summary>
            Sobrenome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Gender">
            <summary>
            Sexo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Birthday">
            <summary>
            Data de nascimento
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.IdAddress">
            <summary>
            Id do Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Cpf">
            <summary>
            CPF
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.RG">
            <summary>
            RG
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Phone">
            <summary>
            Telefone
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Cellphone">
            <summary>
            Celular
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Picture">
            <summary>
            Avatar
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.CustomerType">
            <summary>
            Tipo de cliente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Configurations">
            <summary>
            Lista de Configurações 
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerModel.Address">
            <summary>
            Endereço
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CustomerModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CustomerModel.#ctor(ias.Rebens.Customer)">
            <summary>
            Construtor que recebe um objeto Customer e já popula os atributos
            </summary>
            <param name="customer"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.CustomerModel.GetEntity">
            <summary>
            Retorna um objeto Customer com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.CustomerListItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerListItem.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerListItem.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerListItem.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerListItem.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerListItem.Status">
            <summary>
            Id do Status 
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerListItem.StatusName">
            <summary>
            Nome do Status 
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerListItem.OperationName">
            <summary>
            Nome da Operação
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CustomerListItem.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CustomerListItem.#ctor(ias.Rebens.CustomerReportItem)">
            <summary>
            Construtor que recebe um objeto Customer e já popula os atributos
            </summary>
            <param name="customer"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.CustomerReferalModel">
            <summary>
            Model Customer Referal
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerReferalModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerReferalModel.IdCustomer">
            <summary>
            Id Cliente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerReferalModel.CustomerName">
            <summary>
            Nome do Cliente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerReferalModel.Name">
            <summary>
            Nome do indicado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerReferalModel.Email">
            <summary>
            Email do indicado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerReferalModel.DegreeOfKinship">
            <summary>
            Grau de parentesco
            (Pai = 1, Mãe = 2, Irmão = 3, Irmã = 4, Tio(a) = 5, Primo(a) = 6, Avô(ó) = 7)
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerReferalModel.IdStatus">
            <summary>
            id do Status
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerReferalModel.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.CustomerReferalModel.Date">
            <summary>
            Data
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CustomerReferalModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.CustomerReferalModel.#ctor(ias.Rebens.CustomerReferal)">
            <summary>
            Construtor que popula 
            </summary>
            <param name="customerReferal"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.CustomerReferalModel.GetEntity">
            <summary>
            Retorna um objeto CustomerReferal
            </summary>
            <returns></returns>
        </member>
        <member name="P:ias.Rebens.api.Models.EmailModel.FromEmail">
            <summary>
            Email do destinatário
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.EmailModel.FromName">
            <summary>
            Nome do destinatário
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.EmailModel.ToEmail">
            <summary>
            Email do remetente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.EmailModel.ToName">
            <summary>
            Nome do remetente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.EmailModel.Subject">
            <summary>
            Assunto do e-mail
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.EmailModel.Message">
            <summary>
            Mensagem
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.FaqModel">
            <summary>
            FAQ
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.Id">
            <summary>
            Id da pergunta
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.Question">
            <summary>
            Pergunta
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.Answer">
            <summary>
            Resposta
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.Order">
            <summary>
            Ordem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FaqModel.StatusName">
            <summary>
            Status
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.FaqModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.FaqModel.#ctor(ias.Rebens.Faq)">
            <summary>
            Construtor que recebe um objeto Faq e popula os atributos
            </summary>
            <param name="faq"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.FaqModel.GetEntity">
            <summary>
            Retorna um objeto Faq com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.FormContactModel">
            <summary>
            Formulário de Contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormContactModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormContactModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormContactModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormContactModel.Phone">
            <summary>
            Telefone
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormContactModel.Message">
            <summary>
            Mensagem
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.FormContactModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.FormContactModel.#ctor(ias.Rebens.FormContact)">
            <summary>
            Construtor
            </summary>
            <param name="contact"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.FormContactModel.GetEntity">
            <summary>
            Retorna um contato
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.FormEstablishmentModel">
            <summary>
            Formulário de indicação de estabelecimento
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormEstablishmentModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormEstablishmentModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormEstablishmentModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormEstablishmentModel.Establishment">
            <summary>
            Nome estabelecimento
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormEstablishmentModel.WebSite">
            <summary>
            Website estabelecimento
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormEstablishmentModel.Responsible">
            <summary>
            Nome responsável
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormEstablishmentModel.ResponsibleEmail">
            <summary>
            Email responsável
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormEstablishmentModel.City">
            <summary>
            Cidade
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.FormEstablishmentModel.State">
            <summary>
            Estado
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.FormEstablishmentModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.FormEstablishmentModel.#ctor(ias.Rebens.FormEstablishment)">
            <summary>
            Construtor
            </summary>
            <param name="formEstablishment"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.IntegrationTypeModel">
            <summary>
            Tipo de integração
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.IntegrationTypeModel.Id">
            <summary>
            Id 
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.IntegrationTypeModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.IntegrationTypeModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.IntegrationTypeModel.#ctor(ias.Rebens.Enums.IntegrationType)">
            <summary>
            Construtor que recebe um objeto IntegrationType, e popula os atributos
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.JsonCreateResultModel">
            <summary>
            Modelo de resposta para criação de um item
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.JsonCreateResultModel.Status">
            <summary>
            Status da requisição
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.JsonCreateResultModel.Message">
            <summary>
            Mensagem de erro, alerta ou sucesso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.JsonCreateResultModel.Id">
            <summary>
            Id do item criado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.JsonCreateResultModel.Extra">
            <summary>
            Alguma informação extra
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.JsonModel">
            <summary>
            Modelo de resposta Json
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.JsonModel.Status">
            <summary>
            Status da requisição
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.JsonModel.Message">
            <summary>
            Mensagem de erro, alerta ou sucesso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.JsonModel.Data">
            <summary>
            Informações requisitadas
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.LoginModel">
            <summary>
            Login
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.LoginModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.LoginModel.Password">
            <summary>
            Senha
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.ValidateModel">
            <summary>
            Validate Model
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ValidateModel.Code">
            <summary>
            Código de validação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ValidateModel.Password">
            <summary>
            Senha
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ValidateModel.PasswordConfirm">
            <summary>
            Confirmação da Senha
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.LoginResultModel">
            <summary>
            Login 
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.LoginResultModel.Token">
            <summary>
            Token de acesso
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.LoginResultModel.User">
            <summary>
            Usuário
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.LoginResultModel.Role">
            <summary>
            Papel
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.LoginResultModel.OperationId">
            <summary>
            Id da Operação
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.UserModel">
            <summary>
            Usuário
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.UserModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.UserModel.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.UserModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.OperationAddressModel">
            <summary>
            Relacionamento de Operação com Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationAddressModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationAddressModel.IdAddress">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.OperationContactModel">
            <summary>
            Relacionamento de Operação com Contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationContactModel.IdOperation">
            <summary>
            Id da Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationContactModel.IdContact">
            <summary>
            Id do Contato
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.OperationCustomerModel">
            <summary>
            Cliente Pré cadastrado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationCustomerModel.Id">
            <summary>
            Id 
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationCustomerModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationCustomerModel.CPF">
            <summary>
            CPF
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationCustomerModel.Phone">
            <summary>
            Telefone
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationCustomerModel.Cellphone">
            <summary>
            Celular
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationCustomerModel.Email1">
            <summary>
            Email 1
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationCustomerModel.Email2">
            <summary>
            Email 2
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationCustomerModel.Signed">
            <summary>
            Se já se cadastrou
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationCustomerModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationCustomerModel.#ctor(ias.Rebens.OperationCustomer)">
            <summary>
            Construtor que recebe um objeto IntegrationType, e popula os atributos
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationCustomerModel.GetEntity">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.OperationModel">
            <summary>
            Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Title">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.CompanyName">
            <summary>
            Nome da empresa
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.CompanyDoc">
            <summary>
            Documento da empresa
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Logo">
            <summary>
            Logo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Domain">
            <summary>
            Domínio da opreação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.IdOperationType">
            <summary>
            Tipo da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.OperationType">
            <summary>
            Tipo da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.CachbackPercentage">
            <summary>
            Porcentagem do cashback
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Contact">
            <summary>
            Contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.OperationContacts">
            <summary>
            Lista de relacionamento de Operações com Contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.Code">
            <summary>
            GUID gerado automáticamente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.PublishStatus">
            <summary>
            Status de publicação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.CanPublish">
            <summary>
            Pode publicar
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.TemporaryPublishStatus">
            <summary>
            Status de publicação temporária
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.CanPublishTemporary">
            <summary>
            Pode publicar na url temporária
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.TemporarySubdomain">
            <summary>
            Subdomínio temporário
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationModel.SubdomainCreated">
            <summary>
            Se o subdomínio já foi criado
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationModel.#ctor(ias.Rebens.Operation)">
            <summary>
            Construtor que recebe um objeto Operation e popula os atributos
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationModel.GetEntity">
            <summary>
            Retorna um objeto Operation com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.OperationPartnerCustomerModel">
            <summary>
            Cliente do parceiro da Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerCustomerModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerCustomerModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerCustomerModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerCustomerModel.Cpf">
            <summary>
            CPF
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerCustomerModel.IdOperationPartner">
            <summary>
            Id da Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerCustomerModel.Status">
            <summary>
            Status (Novo = 1, Aprovado = 2, Reprovado = 3, Cadastrado = 4)
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerCustomerModel.StatusName">
            <summary>
            Nome do status
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerCustomerModel.OperationPartnerName">
            <summary>
            Nome do parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerCustomerModel.AdminUserName">
            <summary>
            Nome do Usuário que aprovou ou reprovou o cadastro
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationPartnerCustomerModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationPartnerCustomerModel.#ctor(ias.Rebens.OperationPartnerCustomer)">
            <summary>
            Construtor
            </summary>
            <param name="customer"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationPartnerCustomerModel.GetEntity">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.OperationPartnerModel">
            <summary>
            Parceiro da Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerModel.IdOperation">
            <summary>
            Id da Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationPartnerModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationPartnerModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationPartnerModel.#ctor(ias.Rebens.OperationPartner)">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationPartnerModel.GetEntity">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.OperationTypeModel">
            <summary>
            Tipo de Operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationTypeModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.OperationTypeModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationTypeModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.OperationTypeModel.#ctor(ias.Rebens.Enums.OperationType)">
            <summary>
            Construtor que recebe um objeto OperationType e popula os atributos
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.PartnerAddressModel">
            <summary>
            Relacionamento Parceiro com Endereço
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerAddressModel.IdPartner">
            <summary>
            Id do parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerAddressModel.IdAddress">
            <summary>
            Id do endereço
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.PartnerContactModel">
            <summary>
            Relacionamento Parceiro com Contato
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerContactModel.IdPartner">
            <summary>
            Id do parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerContactModel.IdContact">
            <summary>
            Id do Contato
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.PartnerModel">
            <summary>
            Parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.Logo">
            <summary>
            Logo do parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.Description">
            <summary>
            Descrição do Parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.StatusName">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.Contacts">
            <summary>
            Contatos do parceiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PartnerModel.Addresses">
            <summary>
            Endereços do parceiro
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.PartnerModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.PartnerModel.#ctor(ias.Rebens.Partner)">
            <summary>
            Construtor que recebe um objeto Partner e popula os atributos
            </summary>
            <param name="partner"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.PartnerModel.GetEntity">
            <summary>
            retorna um objeto Partner com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.PaymentModel">
            <summary>
            Modelo do histórico de pagamento
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PaymentModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PaymentModel.DueDate">
            <summary>
            Data de vencimento
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PaymentModel.PayDate">
            <summary>
            Data de pagamento
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PaymentModel.Receipt">
            <summary>
            Número do recibo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PaymentModel.PaymentMethod">
            <summary>
            Forma de pagamento
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PaymentModel.Amount">
            <summary>
            Valor
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PaymentModel.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.PortalBannerModel">
            <summary>
            Portal Banner model 
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBannerModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBannerModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBannerModel.Image">
            <summary>
            Imagem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBannerModel.Order">
            <summary>
            Ordem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBannerModel.Link">
            <summary>
            Link
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBannerModel.Type">
            <summary>
            Tipo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBannerModel.Target">
            <summary>
            Target
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBannerModel.Title">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBannerModel.BenefitCall">
            <summary>
            Chamada do Benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBannerModel.IdBenefit">
            <summary>
            Id do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBannerModel.PartnerLogo">
            <summary>
            Logo do Parceiro
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.PortalBannerModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.PortalBannerModel.#ctor(ias.Rebens.Banner,System.String,System.String,System.String)">
            <summary>
            Construtor que recebe um Banner e popula os atributos
            </summary>
            <param name="banner"></param>
            <param name="title"></param>
            <param name="benefitCall"></param>
            <param name="partnerLogo"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.PortalBenefitModel">
            <summary>
            Benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBenefitModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBenefitModel.Title">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBenefitModel.Image">
            <summary>
            Imagem
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBenefitModel.WebSite">
            <summary>
            Site do benefício
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalBenefitModel.BenefitCall">
            <summary>
            Chamada do Benefício
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.PortalBenefitModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.PortalBenefitModel.#ctor(ias.Rebens.Benefit)">
            <summary>
            Construtor que recebe um Benefício e já popula os atributos
            </summary>
            <param name="benefit"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.PortalHomeLockedModel">
            <summary>
            Portal não logado model
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalHomeLockedModel.BannerFullList">
            <summary>
            Lista dos banners full
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalHomeLockedModel.BannerUnmissable">
            <summary>
            Lista dos banners imperdíveis
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.PortalHomeModel">
            <summary>
            Portal logado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalHomeModel.BannerFullList">
            <summary>
            Lista dos banners full
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalHomeModel.BannerUnmissable">
            <summary>
            Lista dos banners imperdíveis
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalHomeModel.Benefits">
            <summary>
            Lista com os benefícios da home
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.ResultPageModel`1">
            <summary>
            Modelo de Resultado com paginação
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.Data">
            <summary>
            Lista com os itens
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.CurrentPage">
            <summary>
            Página atual
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.ItemsPerPage">
            <summary>
            Itens por página
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.TotalItems">
            <summary>
            Total de itens
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.TotalPages">
            <summary>
            Total de páginas
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.HasNextPage">
            <summary>
            Possui próxima página
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ResultPageModel`1.HasPreviousPage">
            <summary>
            Possui página anterior
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.SignUpModel">
            <summary>
            Model de cadastro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.SignUpModel.Cpf">
            <summary>
            CPF
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.SignUpModel.Email">
            <summary>
            E-mail
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.StaticTextModel">
            <summary>
            Texto estático
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Page">
            <summary>
            Página
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Name">
            <summary>
            Título
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Data">
            <summary>
            Objeto a ser salvo
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.IdOperation">
            <summary>
            Id da operação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextModel.Active">
            <summary>
            Ativo
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.StaticTextModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.StaticTextModel.#ctor(ias.Rebens.StaticText)">
            <summary>
            Construtor que recebe um objeto StaticText e popula os atributos
            </summary>
            <param name="staticText"></param>
        </member>
        <member name="M:ias.Rebens.api.Models.StaticTextModel.GetEntity">
            <summary>
            Retorna um objeto StaticText com as informações
            </summary>
            <returns></returns>
        </member>
        <member name="T:ias.Rebens.api.Models.StaticTextTypeModel">
            <summary>
            Tipo de Texto Estático
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextTypeModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.StaticTextTypeModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.StaticTextTypeModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.StaticTextTypeModel.#ctor(ias.Rebens.Enums.StaticTextType)">
            <summary>
            Construtor que recebe um objeto StaticTextType e popula os atributos
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.TokenModel">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.TokenModel.authenticated">
            <summary>
            Se está autenticado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.TokenModel.created">
            <summary>
            Data da criação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.TokenModel.expiration">
            <summary>
            Data que o token irá expirar
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.TokenModel.accessToken">
            <summary>
            Access Token
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.PortalTokenModel">
            <summary>
            Token Portal
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalTokenModel.authenticated">
            <summary>
            Se está autenticado
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalTokenModel.created">
            <summary>
            Data da criação
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalTokenModel.expiration">
            <summary>
            Data que o token irá expirar
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalTokenModel.accessToken">
            <summary>
            Access Token
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalTokenModel.balance">
            <summary>
            Saldo de cashback do cliente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.PortalTokenModel.picture">
            <summary>
            Foto do usuário
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.ValidateCustomerModel">
            <summary>
            Model de validação de cliente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ValidateCustomerModel.Code">
            <summary>
            Código do cliente
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.ValidateCustomerModel.Password">
            <summary>
            Senha
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Models.WithdrawItemModel">
            <summary>
            Model de Resgate
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.WithdrawItemModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.WithdrawItemModel.IdBankAccount">
            <summary>
            IdBankAccount
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.WithdrawItemModel.BankAccount">
            <summary>
            Conta do resgate
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.WithdrawItemModel.Date">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.WithdrawItemModel.Amount">
            <summary>
            Valor
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.WithdrawItemModel.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.WithdrawItemModel.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Models.WithdrawItemModel.#ctor(ias.Rebens.Withdraw)">
            <summary>
            Construtor
            </summary>
            <param name="withdraw"></param>
        </member>
        <member name="T:ias.Rebens.api.Models.WithdrawModel">
            <summary>
            Model de resgate
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.WithdrawModel.IdBankAccount">
            <summary>
            Id da conta para onde será transferido o dinheiro
            </summary>
        </member>
        <member name="P:ias.Rebens.api.Models.WithdrawModel.Amount">
            <summary>
            Valor do resgate
            </summary>
        </member>
        <member name="T:ias.Rebens.api.Startup">
            <summary>
            Startup Class
            </summary>
        </member>
        <member name="M:ias.Rebens.api.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:ias.Rebens.api.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure Services Method
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:ias.Rebens.api.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Configure Method
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
